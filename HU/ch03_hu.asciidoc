[[ch03_bitcoin_client]]
== A bitcoin kliens

=== Bitcoin Core – a referencia implementáció

((("bitcoin kliens", id="ix_ch03-asciidoc0", range="startofrange")))((("bitcoin kliens","Bitcoin Core", id="ix_ch03-asciidoc1", range="startofrange")))((("Bitcoin Core kliens", id="ix_ch03-asciidoc2", range="startofrange")))((("Satoshi kliens", see="Bitcoin Core kliens")))A _Bitcoin Core_ referencia kliens, más néven a Satoshi kliens a bitcoin.org -ról tölthető le. A referencia kliens  a bitcoin rendszer összes részét megvalósítja:van benne pénztárca, tranzakció ellenőrzés, mely a tranzakciós főkönyv (a blokklánc) teljes másolatára épül, és egy teljes értékű peer-to-peer hálózat csomópont.

((("bitcoin.org","Bitcoin Core, letöltés")))A referencia kliens a http://bitcoin.org/en/choose-your-wallet web helyről, a „Bitcoin Core” választásával tölthető le. Az operációs rendszertől függően egy végrehajtható installáló program fog letöltődni. A Windows esetén ez egy ZIP archívum vagy egy EXE végrehajtható program. A MAC OS esetén egy .dmg disk kép. A Linux változatok az Ubuntu esetén egy PPA csomagot vagy egy tar.gz archívumot tartalmaznak. Az ajánlott klienseket felsoroló bitcoin.org lap <<bitcoin-choose-client>> ábrán látható.

[[bitcoin-choose-client]]
.A bitcoin kliens kiválasztása a bitcoin.org webhelyen
image::images/msbt_0301.png["bitcoin choose client"]

==== A Bitcoin Core kliens első futtatása

((("Bitcoin Core kliens","futtatás")))Ha egy végrehajtható csomagot, például egy .exe, .dmg, vagy PPA csomagot töltöttünk le, akkor ugyanúgy installálhatjuk az operációs rendszerünkön, mint bármely más alkalmazást. A Windows esetében futtassuk az .exe állományt, és lépésről lépésre kövessük az utasításokat. A Mac OS esetében indítsuk el a .dmg-t, és húzzuk a Bitcoin-Qt ikont az _Alkalmazások_ mappába. Az Ubuntu esetében a File Explorer-ben kattintsunk duplán a PPA-ra, ennek hatására megnyílik a package manager, amellyel installálható a csomag. Az installálás befejeződése után egy új „Bitcoin-Qt” alkalmazás jelenik meg az alkalmazások között. Az ikonon történő dupla kattintással indítsuk el a bitcoin klienst. 

A Bitcoin Core első futtatásakor megkezdődik a blokklánc letöltése. A letöltési folyamat több napig tarthat (lásd <<bitcoin-qt-firstload>>). Hagyjuk, hadd fusson a háttérben, amíg meg nem jelenik rajta az egyenleg mellett, hogy „Szinkronban” („Synchronized”), és már nem azt jelzi ki, hogy „Nincs szinkronban” („Out of sync”).

[[bitcoin-qt-firstload]]
.A Bitcoin Core képernyője a blokklánc inicializálása során
image::images/msbt_0302.png["bitcoin-qt first run"]

[TIP]
====
((("Bitcoin Core kliens","helyszükséglete a diszken")))((("blokklánc","a Bitcoin Core szinkronizálása")))((("a Bitcoin Core helyszükséglete a diszken")))A Bitcoin Core a tranzakciós nyilvántartás (blokklánc) egy teljes másolatát állítja elő, melyben a bitcoin hálózat elindulása, vagyis a 2009 óta lezajlott összes tranzakció megtalálható. Ez egy jó pár gigabájt méretű adathalmaz (2013 végén kb. 16 GB volt a mérete), és pár nap alatt, fokozatosan töltődik le. A kliens csak a blokklánc összes adatának letöltése után képes a tranzakciók feldolgozására vagy a számla egyenlegek módosítására. A letöltés során a kliens az egyenleg mellett az jelzi ki, hogy „Nincs szinkronban” („Out of sync”), az ablak alján pedig azt, hogy „Szinkronizálás a hálózattal” („Synchronizing”). Ellenőrizze, hogy van-e elég szabad hely a diszken, valamint elegendő sávszélesség és idő áll-e rendelkezésre a kezdeti szinkronizáláshoz. 
====
 



==== A Bitcoin Core kliens lefordítása a forráskódból

((("Bitcoin Core kliens","forráskódból történő fordítás", id="ix_ch03-asciidoc3", range="startofrange")))((("bitcoind kliens", see="Bitcoin Core kliens")))A fejlesztők azt is megtehetik, hogy ZIP archívumként letöltik a teljes forrást, vagy a Github-ról klónozzák a hiteles forráshalmazt. ((("Bitcoin Core kliens","forráskód, letöltés")))((("GitHub, a Bitcoin Core letöltése innen")))Menjen a https://github.com/bitcoin/bitcoin[GitHub bitcoin web lapra], és válassza a „Download ZIP” gombot a jobb oldalról. Egy másik lehetőség az, ha a git paranccsal létrehozza a forráskód egy helyi másolatát a rendszerén. A lenti példában egy Linux vagy Mac OS alatt kiadott Unix-szerű paranccsal fogjuk klónozni a forrás kódot:

----
$ git clone https://github.com/bitcoin/bitcoin.git
Cloning into 'bitcoin'...
remote: Counting objects: 31864, done.
remote: Compressing objects: 100% (12007/12007), done.
remote: Total 31864 (delta 24480), reused 26530 (delta 19621)
Receiving objects: 100% (31864/31864), 18.47 MiB | 119 KiB/s, done.
Resolving deltas: 100% (24480/24480), done.
$
----

[TIP]
====
Az utasítások és azok kimenete verzióról verzióra változhat. Kövesse a forráskód melletti dokumentációt, még akkor is, ha az különbözik attól, amit itt lát, és ne lepődjön meg akkor sem, ha a képernyőjén megjelenő kimenet kicsit különbözik attól, mint amit az itteni példák tartalmaznak. 
====

A klónozási művelet befejeződése után a forráskódról egy teljes másolat lesz a helyi _bitcoin_ könyvtárban. Menjen ebbe a könyvtárba. Gépelje be a +cd bitcoin+ parancsot:


----
$ cd bitcoin
----
 
Ha a git clone parancsban semmi sem volt megadva,  akkor a helyi példány a legfrissebb kóddal lesz szinkronban, ami akár a bitcoin kliens egy nem stabil vagy „béta” verziója is lehet. A kód lefordítása előtt egy ((("release tags")))release _tag_ (_címke_) megadásával egy adott verzió választható ki. A tag (címke) kulcsszó a helyi másolatot a kódtár egy adott pillanatképével szinkronizálja. A fejlesztők a címkék használatával tudják egy verziószámmal megjelelölni a kód egy adott verzióját . Azt, hogy milyen címkék vannak, a +git tag+ paranccsal írathatjuk ki:

----
$ git tag
v0.1.5
v0.1.6test1
v0.2.0
v0.2.10
v0.2.11
v0.2.12

[... sok egyéb címke ...]

v0.8.4rc2
v0.8.5
v0.8.6
v0.8.6rc1
v0.9.0rc1
----

A címkék listája a bitcoin összes kibocsájtott változatát tartalmazza. Megállapodás szerint azoknak a jelölteknek, melyek tesztelésre szolgálnak, „rc” az utótagja (ami a ((("release candidates")))_release cadidate_ kezdőbetűinek felel meg). A stabil változatoknak, melyek éles rendszereken futtathatók, nincs utótagjuk. A fenti listából a legmagasabb verziójú változatot választjuk, ami az adott időpontban a v0.9.0rc1. Ahhoz, hogy a helyi kód ezzel a változattal legyen szinkronban, a +git checkout+ parancsot használjuk:

----
$ git checkout v0.9.0rc1
Note: checking out 'v0.9.0rc1'.

HEAD is now at 15ec451... Merge pull request #3605
$
----


((("Bitcoin Core kliens","dokumentáció")))A forráskód tartalmaz némi dokumentációt is, melyek különféle állományokban találhatók. Nézze át a bitcoin könyvtár _README.md_ állományában található dokumentációt. Ehhez gépelje be a prompt-on: +more README.md+, és lapozásra használja a szóköz billentyűt. Ebben a fejezetben egy parancssori bitcoin klienst fogunk újraépíteni, melyet a Linux-on +bitcoind+-nek hívnak. Nézze át, hogy hogyan kell az ön platformján a bitcoind parancssori klienst lefordítani, ehhez gépelje be: +more doc/build-unix.md+ . A Mac OS X és a Windows esetében az utasítások a _doc_ könyvtárban, a _build-osx.md_ vagy a _build-msw.md_ állományokban vannak. 

Gondosan nézze át az újraépítés előfeltételeit, melyek a dokumentáció első részében találhatók. Az itt felsorolt könyvtáraknak a rendszerben léteznie kell, mielőtt megkezdené a fordítást. Ha az előfeltételek nem teljesülnek, akkor az újraépítési folyamat hibával ér véget. Ha azért képződött hiba, mert valamelyik előfeltétel nem teljesült, akkor a megfelelő könyvtár installálása után a build folyamat onnan folytatatható, ahol abbamaradt. Ha az előfeltételek teljesülnek, akkor az újraépítési folyamat úgy kezdhető el, hogy az _autogen.sh_ scripttel létrehozza az újraépítésre szolgáló scripteket.

[TIP]
====
A bitcoind build folyamata a 0.9 változat óta az autogen/configure/make rendszert használja. A régebbi változatok egy egyszerű Makefile-t használnak, és a lenti példától kissé különböző módon működnek. Kövesse annak a változatnak az utasításait, amelyet szeretne lefordítani. Valószínűleg a 0.9-ben bevezetett autogen/configure/make lesz az összes jövőbeli kódváltozatnál használt rendszer, és a lenti példa ezt a rendszert mutatja be.
====

----
$ ./autogen.sh 
configure.ac:12: installing `src/build-aux/config.guess'
configure.ac:12: installing `src/build-aux/config.sub'
configure.ac:37: installing `src/build-aux/install-sh'
configure.ac:37: installing `src/build-aux/missing'
src/Makefile.am: installing `src/build-aux/depcomp'
$ 
----

((("autogen.sh script")))Az _autogen.sh_ script automatikus konfiguráló scripteket hoz létre, melyek a rendszerből lekérdezik a helyes beállításokat, és biztosítják, hogy a fordításhoz szükséges összes könyvtár rendelkezésre álljon. Ezek közül a legfontosabb a ((("configure script"))) +configure+ script, amely számos különféle lehetőséget ajánl a build folyamat egyedivé tételére. A különféle lehetőségek megjelenítésére gépelje be: +./configure --help+

----
$ ./configure --help

`configure' configures Bitcoin Core 0.9.0 to adapt to many kinds of systems.

Usage: ./configure [OPTION]... [VAR=VALUE]...

To assign environment variables (e.g., CC, CFLAGS...), specify them as
VAR=VALUE. See below for descriptions of some of the useful variables.

Defaults for the options are specified in brackets.

Configuration:
  -h, --help display this help and exit
      --help=short display options specific to this package
      --help=recursive display the short help of all the included packages
  -V, --version display version information and exit

[... sok egyéb opció és változó kilistázása ...]

Optional Features:
  --disable-option-checking ignore unrecognized --enable/--with options
  --disable-FEATURE do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG] include FEATURE [ARG=yes]

[... további opciók ...]

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to <info@bitcoin.org>.

$
----

A +configure+ scripttel bizonyos jellemzők engedélyezése vagy tiltása lehetséges, az +--enable-FEATURE+ és +--disable-FEATURE+ használatával, ahol a +FEATURE+ a fenti listában szereplő jellemző neve. Ebben a fejezetben egy olyan bitcoind klienst építünk, amelynek alapértelmezett jellemzői lesznek. Nem használunk egyetlen egy konfigurálási lehetőséget sem, de érdemes átnézni, hogy a kliensnek milyen egyéb opcionális részei lehetnek. Ezután a +configure+ script futtatásával automatikusan feltérképezzünk, hogy melyek a szükséges könyvtárak, és egy testre szabott build scriptet hozunk létre a rendszerünk számára:

----
$ ./configure 
checking build system type... x86_64-unknown-linux-gnu
checking host system type... x86_64-unknown-linux-gnu
checking for a BSD-compatible install... /usr/bin/install -c
checking whether build environment is sane... yes
checking for a thread-safe mkdir -p... /bin/mkdir -p
checking for gawk... no
checking for mawk... mawk
checking whether make sets $(MAKE)... yes

[... sok egyéb vizsgált rendszerjellemző ...]

configure: creating ./config.status
config.status: creating Makefile
config.status: creating src/Makefile
config.status: creating src/test/Makefile
config.status: creating src/qt/Makefile
config.status: creating src/qt/test/Makefile
config.status: creating share/setup.nsi
config.status: creating share/qt/Info.plist
config.status: creating qa/pull-tester/run-bitcoind-for-test.sh
config.status: creating qa/pull-tester/build-tests.sh
config.status: creating src/bitcoin-config.h
config.status: executing depfiles commands
$
----

Ha minden jól megy, akkor a +configure+ parancs úgy ér véget, hogy egy testre szabott build scriptet hoz létre, amellyel lefordítható a bitcoind. Ha hiányzó könyvtárak vagy hibák vannak, akkor a +configure+ parancs hibával fog véget érni, és nem hozza létre a fenti példában látható build scripteket. Ha hiba történik, annak a legvalószínűbb oka egy hiányzó vagy nem kompatibilis könyvtár. Nézze át ismét az újraépítésre vonatkozó dokumentációt, és installálja a hiányzó előfeltételeket. Azután futtassa le ismét a +configure+–t, és nézze meg, hogy elmúlt-e a hiba. Ezután fordítsa le a forráskódot – ez a folyamat akár egy óráig is tarthat. A fordítás során néhány másodpercenként vagy néhány percenként megjelenik valami – vagy hibaüzenetet kap, ha valami baj van. A fordítási folyamat bármikor folytatható, ha félbeszakadt. A fordítás megkezdéséhez gépelje be, hogy +make+ :

----
$ make
Making all in src
make[1]: Entering directory `/home/ubuntu/bitcoin/src'
make all-recursive
make[2]: Entering directory `/home/ubuntu/bitcoin/src'
Making all in .
make[3]: Entering directory `/home/ubuntu/bitcoin/src'
  CXX addrman.o
  CXX alert.o
  CXX rpcserver.o
  CXX bloom.o
  CXX chainparams.o

[... sok egyéb fordítási üzenet ...]

  CXX test_bitcoin-wallet_tests.o
  CXX test_bitcoin-rpc_wallet_tests.o
  CXXLD test_bitcoin
make[4]: Leaving directory `/home/ubuntu/bitcoin/src/test'
make[3]: Leaving directory `/home/ubuntu/bitcoin/src/test'
make[2]: Leaving directory `/home/ubuntu/bitcoin/src'
make[1]: Leaving directory `/home/ubuntu/bitcoin/src'
make[1]: Entering directory `/home/ubuntu/bitcoin'
make[1]: Nothing to be done for `all-am'.
make[1]: Leaving directory `/home/ubuntu/bitcoin'
$ 
----

A fordító megjegyzése: Ubuntu 12.04 LTS alatt a bitcoind fordításához szükséges parancsok: 

----
$ sudo apt-get install autoconf 
$ ./autogen.sh 
$ sudo apt-get install git-core build-essential libssl-dev libboost-all-dev libdb-dev libdb++-dev libgtk2.0-dev 
$ ./configure --with-incompatible-bdb 
$ make 
----

Ha minden jól megy, akkor a bitcoind lefordul. Az utolsó lépés az, hogy a bitcoind végrehajtható programot a +make+ paranccsal a rendszer path-ba installáljuk:

----
$ sudo make install
Making install in src
Making install in .
 /bin/mkdir -p '/usr/local/bin'
  /usr/bin/install -c bitcoind bitcoin-cli '/usr/local/bin'
Making install in test
make install-am
 /bin/mkdir -p '/usr/local/bin'
  /usr/bin/install -c test_bitcoin '/usr/local/bin'
$
----

A következőképpen bizonyosodhatunk meg arról, hogy a bitcoind helyesen van installálva:

[source,bash]
----
$ which bitcoind
/usr/local/bin/bitcoind

$ which bitcoin-cli
/usr/local/bin/bitcoin-cli
----

Az alapértelmezés szerinti installáláskor a bitcoind a _/usr/local/bin_ könyvtárba kerül. Amikor a bitcoind-t először futtatjuk, akkor üzen, hogy egy konfigurációs állományt kell létrehoznunk, melyben a JSON-RPC interface számára egy erős jelszó van megadva. Futtassunk a bitcoind-t a +bitcoind+ terminálon történő begépelésével:

----
$ bitcoind
Error: To use the "-server" option, you must set a rpcpassword in the configuration file:
/home/ubuntu/.bitcoin/bitcoin.conf
It is recommended you use the following random password:
rpcuser=bitcoinrpc
rpcpassword=2XA4DuKNCbtZXsBQRRNDEwEY2nM6M4H9Tx5dFjoAVVbK
(you do not need to remember this password)
The username and password MUST NOT be the same.
If the file does not exist, create it with owner-readable-only file permissions.
It is also recommended to set alertnotify so you are notified of problems;
for example: alertnotify=echo %s | mail -s "Bitcoin Alert" admin@foo.com
----

Egy általunk ismert szerkesztő programmal szerkesszük meg a konfigurációs állományt, jelszónak pedig adjunk meg egy erős jelszót, ahogyan azt a bitcoind javasolta. _Ne_ használjuk a fenti jelszót. A _.bitcoin_ könyvtáron belül hozzunk létre egy _bitcoin.conf_ állományt, és adjuk meg benne a felhasználói nevet és jelszót:

[source,ini]
----
rpcuser=bitcoinrpc
rpcpassword=2XA4DuKNCbtZXsBQRRNDEwEY2nM6M4H9Tx5dFjoAVVbK
----

A konfigurációs állomány szerkesztése során egyéb paraméterek is beállíthatók, pl. a +txindex+ (lásd <<txindex>>). A használható opciók a +bitcoind --help+ begépelésével listázhatók ki.

Indítsuk el a bitcoin klienst. Az első futtatáskor a kliens a blokkok letöltésével újra fogja építeni a teljes bitcoin blokkláncot. Ennek sok gigabájt a mérete, és a teljes letöltése átlagosan 2 napig tart. A blokklánc inicializálási idő lerövidíthető, ha a blokklánc egy részleges másolatát ((("blokklánc","letöltés bittorrent klienssel")))bittorrent segítségével a http://bit.ly/1qkLNyh[SourceForge] helyről letöltjük. 

A +-daemon+ opció megadásával futtassuk a bitcoind-t a háttérben:(((range="endofrange", startref="ix_ch03-asciidoc3")))

----
$ bitcoind -daemon

Bitcoin version v0.9.0rc1-beta (2014-01-31 09:30:15 +0100)
Using OpenSSL version OpenSSL 1.0.1c 10 May 2012
Default data directory /home/bitcoin/.bitcoin
Using data directory /bitcoin/
Using at most 4 connections (1024 file descriptors available)
init message: Verifying wallet...
dbenv.open LogDir=/bitcoin/database ErrorFile=/bitcoin/db.log
Bound to [::]:8333
Bound to 0.0.0.0:8333
init message: Loading block index...
Opening LevelDB in /bitcoin/blocks/index
Opened LevelDB successfully
Opening LevelDB in /bitcoin/chainstate
Opened LevelDB successfully

[... további indulási üzenetek ...]

----

=== A Bitcoin Core JSON-RPC API-jának a használata a parancssorból

((("Bitcoin Core kliens","JSON-RPC API", id="ix_ch03-asciidoc5", range="startofrange")))((("Bitcoin Core kliens","használata a parancssorból", id="ix_ch03-asciidoc6", range="startofrange")))((("bitcoin-cli parancssori segédprogram", id="ix_ch03-asciidoc7", range="startofrange")))A Bitcoin Core kliensben van egy parancssorból elérhető JSON-RPC interfész, amely a +bitcoin-cli+ segédprogrammal érhető el. A parancssor lehetővé teszi, hogy interaktívan kísérletezzünk azokkal a lehetőségekkel, melyek az API-n keresztül programokból is elérhetők. Indulásként, a +help+ parancs kiadásával jelenítsük meg a használható bitcoin RPC parancsok listáját:

[[bitcoind_commands]]

----
$ bitcoin-cli help
addmultisigaddress nrequired ["key",...] ( "account" )
addnode "node" "add|remove|onetry"
backupwallet "destination"
createmultisig nrequired ["key",...]
createrawtransaction [{"txid":"id","vout":n},...] {"address":amount,...}
decoderawtransaction "hexstring"
decodescript "hex"
dumpprivkey "bitcoinaddress"
dumpwallet "filename"
getaccount "bitcoinaddress"
getaccountaddress "account"
getaddednodeinfo dns ( "node" )
getaddressesbyaccount "account"
getbalance ( "account" minconf )
getbestblockhash
getblock "hash" ( verbose )
getblockchaininfo
getblockcount
getblockhash index
getblocktemplate ( "jsonrequestobject" )
getconnectioncount
getdifficulty
getgenerate
gethashespersec
getinfo
getmininginfo
getnettotals
getnetworkhashps ( blocks height )
getnetworkinfo
getnewaddress ( "account" )
getpeerinfo
getrawchangeaddress
getrawmempool ( verbose )
getrawtransaction "txid" ( verbose )
getreceivedbyaccount "account" ( minconf )
getreceivedbyaddress "bitcoinaddress" ( minconf )
gettransaction "txid"
gettxout "txid" n ( includemempool )
gettxoutsetinfo
getunconfirmedbalance
getwalletinfo
getwork ( "data" )
help ( "command" )
importprivkey "bitcoinprivkey" ( "label" rescan )
importwallet "filename"
keypoolrefill ( newsize )
listaccounts ( minconf )
listaddressgroupings
listlockunspent
listreceivedbyaccount ( minconf includeempty )
listreceivedbyaddress ( minconf includeempty )
listsinceblock ( "blockhash" target-confirmations )
listtransactions ( "account" count from )
listunspent ( minconf maxconf  ["address",...] )
lockunspent unlock [{"txid":"txid","vout":n},...]
move "fromaccount" "toaccount" amount ( minconf "comment" )
ping
sendfrom "fromaccount" "tobitcoinaddress" amount ( minconf "comment" "comment-to" )
sendmany "fromaccount" {"address":amount,...} ( minconf "comment" )
sendrawtransaction "hexstring" ( allowhighfees )
sendtoaddress "bitcoinaddress" amount ( "comment" "comment-to" )
setaccount "bitcoinaddress" "account"
setgenerate generate ( genproclimit )
settxfee amount
signmessage "bitcoinaddress" "message"
signrawtransaction "hexstring" ( [{"txid":"id","vout":n,"scriptPubKey":"hex","redeemScript":"hex"},...] ["privatekey1",...] sighashtype )
stop
submitblock "hexdata" ( "jsonparametersobject" )
validateaddress "bitcoinaddress"
verifychain ( checklevel numblocks )
verifymessage "bitcoinaddress" "signature" "message"
walletlock
walletpassphrase "passphrase" timeout
walletpassphrasechange "oldpassphrase" "newpassphrase"
----


==== A Bitcoin Core kliens státuszának lekérdezése

Parancs: +getinfo+

((("Bitcoin Core kliens","kliens státusz, lekérdezés)))((("bitcoin-cli parancssori segédprogram","getinfo parancs")))((("kliens státusz, lekérdezés")))((("getinfo parancs (bitcoin-cli)")))A bitcoin +getinfo+ RPC parancsával a bitcoin hálózati csomópontról, a pénztárcáról és a blokklánc adatbázisról írathatók ki a legfontosabb adatok. A parancs a +bitcoin-cli+ használatával futtatható:

[source,bash]
----
$ bitcoin-cli getinfo
----
[source,json]
----
{
    "version" : 90000,
    "protocolversion" : 70002,
    "walletversion" : 60000,
    "balance" : 0.00000000,
    "blocks" : 286216,
    "timeoffset" : -72,
    "connections" : 4,
    "proxy" : "",
    "difficulty" : 2621404453.06461525,
    "testnet" : false,
    "keypoololdest" : 1374553827,
    "keypoolsize" : 101,
    "paytxfee" : 0.00000000,
    "errors" : ""
}
----

Az adatokat ((("JavaScript Object Notation (JSON)")))JavaScript Object Notation (JSON) formátumban kapjuk vissza. Ezt a formátumot az összes programozási nyelv könnyen „megérti”, ugyanakkor emberek számra is egész olvasható. Az adatok között látható a bitcoin kliens szoftver verziója (90000), a protokoll verziója (70002), és a pénztárca verziója (60000). Látható a pénztárcában lévő aktuális egyenleg, amely nulla. Látható a blokk magasság (286216), amely azt mutatja, hogy a hány blokkot ismer a kliens. Láthatunk még a bitcoin hálózatra és a kliens beállítására vonatkozó különféle statisztikákat. A beállításokat a fejezet hátrelévő részében részletesebben megvizsgáljuk. 

[TIP]
====
Eltarthat némi ideig, akár több napig is, amíg a bitcoind kliens „beéri” az aktuális blokklánc magasságot, eközben blokkokat tölt le a többi bitcoin klienstől. A folyamat menete úgy ellenőrizhető, hogy a +getinfo+-val kiíratjuk az ismert blokkok számát.
====

==== A  pénztárca beállítása és titkosítása

Parancsok: +encryptwallet+, +walletpassphrase+

((("bitcoin-cli parancssori segédprogram","pénztárca beállítás")))((("bitcoin-cli parancssori segédprogram","walletpassphrase parancs")))((("encryptwallet parancs (bitcoin-cli)")))((("walletpassphrase parancs (bitcoin-cli)")))((("pénztárcák","beállítás a parancssorból")))Mielőtt a kulcsok létrehozásával és más parancsokkal folytatnánk a dolgot, először egy jelszóval titkosítanunk kell a pénztárcát. Ennél a példánál az +encryptwallet+ parancsot és a „foo” jelszót használjuk. Természetesen a „foo” jelszavat az önök pénztárcája esetében egy erős és összetett jelszóval kell helyettesíteni!

----
$ bitcoin-cli encryptwallet foo
wallet encrypted; Bitcoin server stopping, restart to run with encrypted wallet. The keypool has been flushed, you need to make a new backup.
$
----

Úgy tudjuk ellenőrizni, hogy titkosított lett-e a pénztárca, hogy ismét lefuttatjuk a +getinfo+ parancsot. Ezúttal egy új sort is láthatunk, az +unlocked_until+ sort, amely azt mutatja, hogy mennyi ideig lesz a pénztárca kikódoló jelszó a memóriában, és mennyi ideig fogja a pénztárcát nyitva tartani. Először nulla lesz az értéke, ami azt jelenti, hogy a pénztárca zárolva van:

[source,bash]
----
$ bitcoin-cli getinfo
----
[source,json]
----
{
    "version" : 90000,

#[... további információk...]

    "unlocked_until" : 0,
    "errors" : ""
}
$
----

A pénztárca zárolásának feloldásához adjuk ki a +walletpassphrase+ parancsot, melynek két paramétere van: a jelszó, és egy szám, amely azt mutatja, hogy hány másodperc múlva záródik be automatikusan a pénztárca (idő számláló):

----
$ bitcoin-cli walletpassphrase foo 360
$
----

A +getinfo+ ismételt futtatásával nézzük meg, hogy kinyílt-e a pénztárca, és mennyi a lejárati idő:

[source,bash]
----
$ bitcoin-cli getinfo
----
[source,json]
----
{
    "version" : 90000,

#[... egyéb információk ...]

    "unlocked_until" : 1392580909,
    "errors" : ""
}
----

==== A pénztárca biztonsági mentése, egyszerű szövegként történő kivitele és visszaállítása

Parancsok: +backupwallet+, +importwallet+, +dumpwallet+

((("mentések","pénztárcáké")))((("backupwallet parancs (bitcoin-cli)")))((("bitcoin-cli parancssori segédprogram","backupwallet parancs")))((("bitcoin-cli parancssori segédprogram","dumpwallet parancs")))((("bitcoin-cli parancssori segédprogram","importwallet parancs")))((("dumpwallet parancs (bitcoin-cli)")))((("importwallet parancs (bitcoin-cli)")))((("pénztárcák","mentése")))((("pénztárcák","mentése egyszerű szövegként")))((("pénztárcák","visszaállítása")))Ezután azt fogjuk gyakorolni, hogy hogyan lehet a pénztárcáról biztonsági mentést készíteni, és hogyan lehet a biztonsági mentésből visszaállítani a pénztárcát. A mentéshez a +backupwallet+ parancs használható, melynek paramétere egy állománynév. Például mentsük el a pénztárcát a _wallet.backup_ állományba:


----
$ bitcoin-cli backupwallet wallet.backup
$
----

Most állítsuk helyre a pénztárcát az +importwallet+ paranccsal. Ha a pénztárca zárolva van, akkor a biztonsági mentés visszaimportálása előtt először meg kell szüntetni a zárolását (lásd a fenti +walletpassphrase+ parancsot).


----
$ bitcoin-cli importwallet wallet.backup
$
----

A +dumpwallet+ paranccsal a pénztárca egy olvasható szöveges állományba vihető ki:

----
$ bitcoin-cli dumpwallet wallet.txt
$ more wallet.txt
# Wallet dump created by Bitcoin v0.9.0rc1-beta (2014-01-31 09:30:15 +0100)
# * Created on 2014-02- 8dT20:34:55Z
# * Best block at time of backup was 286234 (0000000000000000f74f0bc9d3c186267bc45c7b91c49a0386538ac24c0d3a44),
#   mined on 2014-02- 8dT20:24:01Z

KzTg2wn6Z8s7ai5NA9MVX4vstHRsqP26QKJCzLg4JvFrp6mMaGB9 2013-07- 4dT04:30:27Z change=1 # addr=16pJ6XkwSQv5ma5FSXMRPaXEYrENCEg47F
Kz3dVz7R6mUpXzdZy4gJEVZxXJwA15f198eVui4CUivXotzLBDKY 2013-07- 4dT04:30:27Z change=1 # addr=17oJds8kaN8LP8kuAkWTco6ZM7BGXFC3gk
[... sok egyéb kulcs ...]

$
----

==== Pénztárca címek és pénzt fogadó tranzakciók

Parancsok: +getnewaddress+, +getreceivedbyaddress+, +listtransactions+, +getaddressesbyaccount+, +getbalance+

((("címek", id="ix_ch03-asciidoc9", range="startofrange")))((("bitcoin-cli parancssori segédprogram","getaddressesbyaccount parancs", id="ix_ch03-asciidoc10", range="startofrange")))((("bitcoin-cli parancssori segédprogram","getbalance parancs", id="ix_ch03-asciidoc11", range="startofrange")))((("bitcoin-cliparancssori segédprogram","getnewaddress parancs", id="ix_ch03-asciidoc12", range="startofrange")))((("bitcoin-cli parancssori segédprogram","getreceivedbyaddress parancs", id="ix_ch03-asciidoc13", range="startofrange")))((("bitcoin-cli parancssori segédprogram","listtransactions parancs", id="ix_ch03-asciidoc14", range="startofrange")))((("getaddressesbyaccount parancs (bitcoin-cli)", id="ix_ch03-asciidoc15", range="startofrange")))((("getbalance parancs (bitcoin-cli)", id="ix_ch03-asciidoc16", range="startofrange")))((("getnewaddress parancs (bitcoin-cli)", id="ix_ch03-asciidoc17", range="startofrange")))((("getreceivedbyaddress parancs (bitcoin-cli)", id="ix_ch03-asciidoc18", range="startofrange")))((("listtransactions parancs (bitcoin-cli)", id="ix_ch03-asciidoc19", range="startofrange")))((("tranzakciók","pénztárcák, fogadás", id="ix_ch03-asciidoc20", range="startofrange")))((("pénztárcák","címek", id="ix_ch03-asciidoc21", range="startofrange")))((("pénztárcák","tranzakciók fogadása", id="ix_ch03-asciidoc22", range="startofrange")))A bitcoin referencia kliens nyilvántart egy címhalmazt, melynek mérete a +getinfo+ parancs használatakor a +keypoolsize+ -nál jelenik meg. Ezek a címek automatikusan jönnek létre, és nyilvános pénz fogadó címként vagy a visszajáró pénz címeként használhatók. Egy ilyen cím a +getnewaddress+ paranccsal íratható ki:


----
$ bitcoin-cli getnewaddress 
1hvzSofGwT8cjb8JU7nBsCSfEVQX5u9CL
----

Ennek a címnek a használatával küldjünk egy kis bitcoint egy külső pénztárcából a bitcoind pénztárcánkba (ha már van némi bitcoinunk egy pénzváltóban, egy web-es pénztárcában vagy egy másik bitcoind pénztárcában). Példánkban 50 mBTC-t (0.050 bitcoint) fogunk küldeni a fent visszaadott címre. 

Ezután lekérdezhetjük a bitcoind klienstől, hogy mennyi pénz jött erre a címre, és megadhatjuk, hogy hány darab megerősítésre van szükség ahhoz, hogy a pénzt beszámítsa az egyenlegbe. Példánkban nulla megerősítést fogunk megadni. Néhány másodperccel azt követően, hogy a másik pénztárcából elküldtük a bitcoint, már látjuk, hogy megjelent a pénztárcában. A +getreceivedbyaddress+ parancsot fogjuk használni a fenti címmel, és nulla (0) megerősítési számmal:


----
$ bitcoin-cli getreceivedbyaddress 1hvzSofGwT8cjb8JU7nBsCSfEVQX5u9CL 0
0.05000000
----

Ha a nullát elhagyjuk a parancs végéről, akkor csak azokat az összegeket fogjuk látni, melyeknek legalább +minconf+ megerősítése van. A +miniconf+ beállítás a bitcoind konfigurációs állományában található. Mivel a bitcoin küldő tranzakció csak az utolsó pár másodpercben érkezett meg, még nincs megerősítve, és emiatt a parancs nulla egyenleget fog kiírni:


----
$ bitcoin-cli getreceivedbyaddress 1hvzSofGwT8cjb8JU7nBsCSfEVQX5u9CL 
0.00000000
----

A pénztárca által fogadott összes tranzakció is kijelezhető, a  +listtransactions+ paranccsal:


----
$ bitcoin-cli listtransactions 
----
[source,json]
----
[
    {
        "account" : "",
        "address" : "1hvzSofGwT8cjb8JU7nBsCSfEVQX5u9CL",
        "category" : "receive",
        "amount" : 0.05000000,
        "confirmations" : 0,
        "txid" : "9ca8f969bd3ef5ec2a8685660fdbf7a8bd365524c2e1fc66c309acbae2c14ae3",
        "time" : 1392660908,
        "timereceived" : 1392660908
    }
]

----

A +getaddressbyaccount+ paranccsal kilistázhatjuk a pénztárcához tartozó összes címet is:


----
$ bitcoin-cli getaddressesbyaccount ""
----
[source,json]
----
[
    "1LQoTPYy1TyERbNV4zZbhEmgyfAipC6eqL",
    "17vrg8uwMQUibkvS2ECRX4zpcVJ78iFaZS",
    "1FvRHWhHBBZA8cGRRsGiAeqEzUmjJkJQWR",
    "1NVJK3JsL41BF1KyxrUyJW5XHjunjfp2jz",
    "14MZqqzCxjc99M5ipsQSRfieT7qPZcM7Df",
    "1BhrGvtKFjTAhGdPGbrEwP3xvFjkJBuFCa",
    "15nem8CX91XtQE8B1Hdv97jE8X44H3DQMT",
    "1Q3q6taTsUiv3mMemEuQQJ9sGLEGaSjo81",
    "1HoSiTg8sb16oE6SrmazQEwcGEv8obv9ns",
    "13fE8BGhBvnoy68yZKuWJ2hheYKovSDjqM",
    "1hvzSofGwT8cjb8JU7nBsCSfEVQX5u9CL",
    "1KHUmVfCJteJ21LmRXHSpPoe23rXKifAb2",
    "1LqJZz1D9yHxG4cLkdujnqG5jNNGmPeAMD"
]
----

Végül a +getbalance+ paranccsal a pénztárca egészének egyenlegét írathatjuk ki, vagyis az összes olyan tranzakció összegét, amely legalább +minconf+ megerősítéssel rendelkezik:


----
$ bitcoin-cli getbalance
0.05000000
----

[TIP]
====
((("getbalance parancs (bitcoin-cli)","megerősítetlen tranzakciók és")))((("megerősítetlen tranzakciók","getbalance parancs és")))Ha a tranzakció még nincs megerősítve, akkor a +getbalance+ által visszaadott egyenleg nulla lesz. A „minconf” konfigurációs beállítás határozza meg, hogy legalább hány darab megerősítésre van szükség ahhoz, hogy a tranzakció megjelenjen az egyenlegben.(((range="endofrange", startref="ix_ch03-asciidoc22")))(((range="endofrange", startref="ix_ch03-asciidoc21")))(((range="endofrange", startref="ix_ch03-asciidoc20")))(((range="endofrange", startref="ix_ch03-asciidoc19")))(((range="endofrange", startref="ix_ch03-asciidoc18")))(((range="endofrange", startref="ix_ch03-asciidoc17")))(((range="endofrange", startref="ix_ch03-asciidoc16")))(((range="endofrange", startref="ix_ch03-asciidoc15")))(((range="endofrange", startref="ix_ch03-asciidoc14")))(((range="endofrange", startref="ix_ch03-asciidoc13")))(((range="endofrange", startref="ix_ch03-asciidoc12")))(((range="endofrange", startref="ix_ch03-asciidoc11")))(((range="endofrange", startref="ix_ch03-asciidoc10")))(((range="endofrange", startref="ix_ch03-asciidoc9")))
====


==== Tranzakciók vizsgálata és dekódolása

Parancsok: +gettransaction+, +getrawtransaction+, +decoderawtransaction+

((("bitcoin-cli parancssori segédprogram","decoderawtransaction parancs", id="ix_ch03-asciidoc23", range="startofrange")))((("bitcoin-cli parancssori segédprogram","getrawtransaction parancs", id="ix_ch03-asciidoc24", range="startofrange")))((("bitcoin-cli parancssori segédprogram","gettransaction parancs", id="ix_ch03-asciidoc25", range="startofrange")))((("decoderawtransaction parancs (bitcoin-cli)", id="ix_ch03-asciidoc26", range="startofrange")))((("getrawtransaction parancs (bitcoin-cli)", id="ix_ch03-asciidoc27", range="startofrange")))((("gettransaction parancsd (bitcoin-cli)", id="ix_ch03-asciidoc28", range="startofrange")))((("tranzakciók","dekódolása", id="ix_ch03-asciidoc29", range="startofrange")))((("tranzakciók","vizsgálata", id="ix_ch03-asciidoc30", range="startofrange")))Most a +gettransactions+ paranccsal megvizsgáljuk azt a bejövő tranzakciót, amelyet előzőleg kilistáztunk. A tranzakciót úgy tudjuk kilistázni, hogy a +gettransaction+ parancsban a txid helyén megadjuk a tranzakció hash értékét (zanzáját):


----
$ bitcoin-cli gettransaction 9ca8f969bd3ef5ec2a8685660fdbf7a8bd365524c2e1fc66c309acbae2c14ae3
----
[source,json]
----
{
    "amount" : 0.05000000,
    "confirmations" : 0,
    "txid" : "9ca8f969bd3ef5ec2a8685660fdbf7a8bd365524c2e1fc66c309acbae2c14ae3",
    "time" : 1392660908,
    "timereceived" : 1392660908,
    "details" : [
        {
            "account" : "",
            "address" : "1hvzSofGwT8cjb8JU7nBsCSfEVQX5u9CL",
            "category" : "receive",
            "amount" : 0.05000000
        }
    ]
}
----

[TIP]
====
A tranzakció azonosítók mindaddig nem hitelesek, amíg a tranzakció megerősítésre nem került. Ha a blokkláncban hiányzik a tranzakció azonosító, az nem jelenti azt, hogy a tranzakció nem lett feldolgozva. Ez az ún. „tranzakció képlékenység” („transaction malleability”), amelynek az az oka, hogy egy tranzakció hashe az előtt, mielőtt megerősítésre kerül a blokkban, még módosítható. A megerősítés után a txid megváltoztathatatlan és hiteles.
====

A +gettransaction+ által fent kijelzett tranzakció egy egyszerűsített alak. A teljes tranzakció visszanyeréséhez és dekódolásához két parancsot fogunk használni, a +getrawtransaction+ és a +decoderawtransaction+ parancsot. Először, a +getrawtransaction+ parancsnak paraméterként megadjuk a _tranzakció hasht (txid-t)_, a parancs pedig „nyers” hexa stringként a teljes tranzakciót visszaadja, pontosan úgy, ahogyan azt a bitcoin hálózat ismeri :

----
$ bitcoin-cli getrawtransaction 9ca8f969bd3ef5ec2a8685660fdbf7a8bd365524c2e1fc66c309acbae2c14ae3

0100000001d717279515f88e2f56ce4e8a31e2ae3e9f00ba1d0add648e80c480ea22e0c7d3000000008b483045022100a4ebbeec83225dedead659bbde7da3d026c8b8e12e61a2df0dd0758e227383b302203301768ef878007e9ef7c304f70ffaf1f2c975b192d34c5b9b2ac1bd193dfba2014104793ac8a58ea751f9710e39aad2e296cc14daa44fa59248be58ede65e4c4b884ac5b5b6dede05ba84727e34c8fd3ee1d6929d7a44b6e111d41cc79e05dbfe5ceaffffffff02404b4c00000000001976a91407bdb518fa2e6089fd810235cf1100c9c13d1fd288ac1f312906000000001976a914107b7086b31518935c8d28703d66d09b3623134388ac00000000
----

Ennek a hexa stringnek a dekódolására a +decoderawtransaction+ parancs használható. A teljes tartalom JSON adatstruktúraként történő megjeleníteni másoljuk a hexa stringet a +decoderawtransaction+ első paraméterének a helyébe:

----
$ bitcoin-cli decoderawtransaction 0100000001d717279515f88e2f56ce4e8a31e2ae3e9f00ba1d0add648e80c480ea22e0c7d3000000008b483045022100a4ebbeec83225dedead659bbde7da3d026c8b8e12e61a2df0dd0758e227383b302203301768ef878007e9ef7c304f70ffaf1f2c975b192d34c5b9b2ac1bd193dfba2014104793ac8a58ea751f9710e39aad2e296cc14daa44fa59248be58ede65e4c4b884ac5b5b6dede05ba84727e34c8fd3ee1d6929d7a44b6e111d41cc79e05dbfe5ceaffffffff02404b4c00000000001976a91407bdb518fa2e6089fd810235cf1100c9c13d1fd288ac1f312906000000001976a914107b7086b31518935c8d28703d66d09b3623134388ac00000000
----
[source,json]
----
{
    "txid" : "9ca8f969bd3ef5ec2a8685660fdbf7a8bd365524c2e1fc66c309acbae2c14ae3",
    "version" : 1,
    "locktime" : 0,
    "vin" : [
        {
            "txid" : "d3c7e022ea80c4808e64dd0a1dba009f3eaee2318a4ece562f8ef815952717d7",
            "vout" : 0,
            "scriptSig" : {
                "asm" : "3045022100a4ebbeec83225dedead659bbde7da3d026c8b8e12e61a2df0dd0758e227383b302203301768ef878007e9ef7c304f70ffaf1f2c975b192d34c5b9b2ac1bd193dfba20104793ac8a58ea751f9710e39aad2e296cc14daa44fa59248be58ede65e4c4b884ac5b5b6dede05ba84727e34c8fd3ee1d6929d7a44b6e111d41cc79e05dbfe5cea",
                "hex": "483045022100a4ebbeec83225dedead659bbde7da3d026c8b8e12e61a2df0dd0758e227383b302203301768ef878007e9ef7c304f70ffaf1f2c975b192d34c5b9b2ac1bd193dfba2014104793ac8a58ea751f9710e39aad2e296cc14daa44fa59248be58ede65e4c4b884ac5b5b6dede05ba84727e34c8fd3ee1d6929d7a44b6e111d41cc79e05dbfe5cea"
            },
            "sequence" : 4294967295
        }
    ],
    "vout" : [
        {
            "value" : 0.05000000,
            "n" : 0,
            "scriptPubKey" : {
                "asm" : "OP_DUP OP_HASH160 07bdb518fa2e6089fd810235cf1100c9c13d1fd2 OP_EQUALVERIFY OP_CHECKSIG",
                "hex" : "76a91407bdb518fa2e6089fd810235cf1100c9c13d1fd288ac",
                "reqSigs" : 1,
                "type" : "pubkeyhash",
                "addresses" : [
                    "1hvzSofGwT8cjb8JU7nBsCSfEVQX5u9CL"
                ]
            }
        },
        {
            "value" : 1.03362847,
            "n" : 1,
            "scriptPubKey" : {
                "asm" : "OP_DUP OP_HASH160 107b7086b31518935c8d28703d66d09b36231343 OP_EQUALVERIFY OP_CHECKSIG",
                "hex" : "76a914107b7086b31518935c8d28703d66d09b3623134388ac",
                "reqSigs" : 1,
                "type" : "pubkeyhash",
                "addresses" : [
                    "12W9goQ3P7Waw5JH8fRVs1e2rVAKoGnvoy"
                ]
            }
        }
    ]
}
----

A tranzakció dekódolás a tranzakció összes részét, többek között a tranzakció bemeneteket és kimeneteket is megjeleníti. Ebben az esetben azt látjuk, hogy a tranzakció, amely 50 mBTC-t írt jóvá az új címünkre, egy bemenetet és két kimenetet használt. A tranzakció bemenete egy előzőleg megerősített tranzakció kimenete volt (amely fent a +d3c7+ kezdetű vin txid-ként szerepel). A két kimenet megfelel az 50 mBTC jóváírásnak és a visszajáró pénznek. 

A blokkláncot tovább tudjuk vizsgálni, ha ugyanezzel a paranccsal (vagyis a +gettransaction+ paranccsal) a tranzakcióban szereplő előző tranzakciókat listázzuk ki. Tranzakcióról tranzakcióra lépve nyomon követhetjük a tranzakcióláncban, hogy az egyes tulajdonosok között  hogyan mozogtak az érmék. 

Ha az általunk fogadott tranzakció már be lett foglalva egy blokkba és megerősítésre került, akkor a +gettransaction+ parancs további információkat is szolgáltat, többek között megmutatja azt a _blockhasht (azonosítót)_, amelybe bele lett foglalva a tranzakció:

----
$ bitcoin-cli gettransaction 9ca8f969bd3ef5ec2a8685660fdbf7a8bd365524c2e1fc66c309acbae2c14ae3
----
[source,json]
----
{
    "amount" : 0.05000000,
    "confirmations" : 1,
    "blockhash" : "000000000000000051d2e759c63a26e247f185ecb7926ed7a6624bc31c2a717b",
    "blockindex" : 18,
    "blocktime" : 1392660808,
    "txid" : "9ca8f969bd3ef5ec2a8685660fdbf7a8bd365524c2e1fc66c309acbae2c14ae3",
    "time" : 1392660908,
    "timereceived" : 1392660908,
    "details" : [
        {
            "account" : "",
            "address" : "1hvzSofGwT8cjb8JU7nBsCSfEVQX5u9CL",
            "category" : "receive",
            "amount" : 0.05000000
        }
    ]
}
----

Az egyik új információ a +blockhash+, ami annak a blocknak a hashe (zanzája), amibe a tranzakció be lett foglalva, a másik pedig a +blockindex+, melynek értéke (18) azt mutatja, hogy a tranzakciónk a blokk 18. tranzakciója. 

[[txindex]]
.A Tranzakciós Adatbázis Index és a  txindex opció
****
((("tranzakciós adatbázis index")))Alapértelmezésben a Bitcoin Core által felépített adatbázis _kizárólag_ a felhasználó pénztárcájához tartozó tranzakciókat tartalmazza. Ha a +gettransaction+ paranccsal szeretnénk _akármelyik_ tranzakciót kilistázni, akkor a Bitcoin Core-t úgy kell beállítanunk, hogy egy teljes adatbázis indexet építsen föl, amely a ((("txindex opció (Bitcoin Core)"))) +txindex+ opcióval lehetséges. Állítsa be a +txindex=1+ opciót a Bitcoin Core konfigurációs állományában. (A konfigurációs állomány (általában) a felhasználó home könyvtárában van, a _.bitcoin/bitcoin.conf_ állományban). A paraméter beállítását követően újra kell indítani a bitcoind-t és meg kell várni az index újraépülését.(((range="endofrange", startref="ix_ch03-asciidoc30")))(((range="endofrange", startref="ix_ch03-asciidoc29")))(((range="endofrange", startref="ix_ch03-asciidoc28")))(((range="endofrange", startref="ix_ch03-asciidoc27")))(((range="endofrange", startref="ix_ch03-asciidoc26")))(((range="endofrange", startref="ix_ch03-asciidoc25")))(((range="endofrange", startref="ix_ch03-asciidoc24")))(((range="endofrange", startref="ix_ch03-asciidoc23"))) 
****

==== Blokkok vizsgálata

Parancsok: +getblock+, +getblockhash+

((("bitcoin-cli parancssori segédprogram","getblock parancs")))((("bitcoin-cli parancssori segédprogram","getblockhash parancs")))((("blokkok,"vizsgálata")))((("getblock parancs (bitcoin-cli)")))((("getblockhash parancs (bitcoin-cli)")))Most, hogy tudjuk, melyik blokkba lett befoglalva a tranzakciónk, le tudjuk kérdezni ezt a blokkot. A +getblock+ parancsot használjuk, és paraméterként a blokk hashét (zanzáját) adjuk meg:


----
$ bitcoin-cli getblock 000000000000000051d2e759c63a26e247f185ecb7926ed7a6624bc31c2a717b true
----
[source,json]
----
{
    "hash" : "000000000000000051d2e759c63a26e247f185ecb7926ed7a6624bc31c2a717b",
    "confirmations" : 2,
    "size" : 248758,
    "height" : 286384,
    "version" : 2,
    "merkleroot" : "9891747e37903016c3b77c7a0ef10acf467c530de52d84735bd55538719f9916",
    "tx" : [
        "46e130ab3c67d31d2b2c7f8fbc1ca71604a72e6bc504c8a35f777286c6d89bf0",
        "2d5625725b66d6c1da88b80b41e8c07dc5179ae2553361c96b14bcf1ce2c3868",
        "923392fc41904894f32d7c127059bed27dbb3cfd550d87b9a2dc03824f249c80",
        "f983739510a0f75837a82bfd9c96cd72090b15fa3928efb9cce95f6884203214",
        "190e1b010d5a53161aa0733b953eb29ef1074070658aaa656f933ded1a177952",
        "ee791ec8161440262f6e9144d5702f0057cef7e5767bc043879b7c2ff3ff5277",
        "4c45449ff56582664abfadeb1907756d9bc90601d32387d9cfd4f1ef813b46be",
        "3b031ed886c6d5220b3e3a28e3261727f3b4f0b29de5f93bc2de3e97938a8a53",
        "14b533283751e34a8065952fd1cd2c954e3d37aaa69d4b183ac6483481e5497d",
        "57b28365adaff61aaf60462e917a7cc9931904258127685c18f136eeaebd5d35",
        "8c0cc19fff6b66980f90af39bee20294bc745baf32cd83199aa83a1f0cd6ca51",
        "1b408640d54a1409d66ddaf3915a9dc2e8a6227439e8d91d2f74e704ba1cdae2",
        "0568f4fad1fdeff4dc70b106b0f0ec7827642c05fe5d2295b9deba4f5c5f5168",
        "9194bfe5756c7ec04743341a3605da285752685b9c7eebb594c6ed9ec9145f86",
        "765038fc1d444c5d5db9163ba1cc74bba2b4f87dd87985342813bd24021b6faf",
        "bff1caa9c20fa4eef33877765ee0a7d599fd1962417871ca63a2486476637136",
        "d76aa89083f56fcce4d5bf7fcf20c0406abdac0375a2d3c62007f64aa80bed74",
        "e57a4c70f91c8d9ba0ff0a55987ea578affb92daaa59c76820125f31a9584dfc",
        "9ca8f969bd3ef5ec2a8685660fdbf7a8bd365524c2e1fc66c309acbae2c14ae3",

#[... sok további tranzakció ...]

    ],
    "time" : 1392660808,
    "nonce" : 3888130470,
    "bits" : "19015f53",
    "difficulty" : 3129573174.52228737,
    "chainwork" : "000000000000000000000000000000000000000000001931d1658fc04879e466",
    "previousblockhash" : "0000000000000000177e61d5f6ba6b9450e0dade9f39c257b4d48b4941ac77e7",
    "nextblockhash" : "0000000000000001239d2c3bf7f4c68a4ca673e434702a57da8fe0d829a92eb6"

----

A blokk 367 db tranzakciót tartalmaz, és a 18. kilistázott tranzakció (+9ca8f9…+) az a txid (tranzakció azonosító), amely 50 mBTC-t írt jóvá a címünkre. A +height+ sor szerint az adott blokk a 286384. blokk volt a blokkláncban. 

Egy blokkot a magassága alapján a a +getblockhash+ paranccsal tudjuk elérni, a parancs paramétere a blokk magasság, és a blokkhoz tartozó blokk hasht (zanzát) adja vissza:


----
$ bitcoin-cli getblockhash 0

000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f
----

Fent a „genezis blokk” blokk hashét írattuk ki. A genezis blokk volt az első, Satoshi Nakamoto által kibányászott blokk, és nulla a magassága. A blokk a következőket tartalmazza:


----
$ bitcoin-cli getblock 000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f
----
[source,json]
----
{
    "hash" : "000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f",
    "confirmations" : 286388,
    "size" : 285,
    "height" : 0,
    "version" : 1,
    "merkleroot" : "4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b",
    "tx" : [
        "4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b"
    ],
    "time" : 1231006505,
    "nonce" : 2083236893,
    "bits" : "1d00ffff",
    "difficulty" : 1.00000000,
    "chainwork" : "0000000000000000000000000000000000000000000000000000000100010001",
    "nextblockhash" : "00000000839a8e6886ab5951d76f411475428afc90947ee320161bbf18eb6048"
}
----

A +getblock+, +getblockhash+ és +gettransaction+ paranccsokkal a blokklánc adatbázisát egy program segítségével is meg tudjuk vizsgálni. 


==== Tranzakciók létrehozása, aláírása és feladása az el nem költött kimenetek alapján

Parancsok: +listunspent+, +gettxout+, +createrawtransaction+, +decoderawtransaction+, +signrawtransaction+, +sendrawtransaction+

((("bitcoin-cli parancssori segédprogram","createrawtransaction parancs", id="ix_ch03-asciidoc31", range="startofrange")))((("bitcoin-cli parancssori segédprogram","decoderawtransaction parancs", id="ix_ch03-asciidoc32", range="startofrange")))((("bitcoin-cli parancssori segédprogram","gettxout parancs", id="ix_ch03-asciidoc33", range="startofrange")))((("bitcoin-cli parancssori segédprogram","listunspent parancs", id="ix_ch03-asciidoc34", range="startofrange")))((("bitcoin-cli parancssori segédprogram","sendrawtransaction parancs", id="ix_ch03-asciidoc35", range="startofrange")))((("bitcoin-cli parancssori segédprogram","signrawtransaction parancs", id="ix_ch03-asciidoc36", range="startofrange")))((("createrawtransaction parancs (bitcoin-cli)", id="ix_ch03-asciidoc37", range="startofrange")))((("decoderawtransaction parancs (bitcoin-cli)", id="ix_ch03-asciidoc38", range="startofrange")))((("gettxout parancs (bitcoin-cli)", id="ix_ch03-asciidoc39", range="startofrange")))((("listunspent parancs (bitcoin-cli)", id="ix_ch03-asciidoc40", range="startofrange")))((("sendrawtransaction parancs (bitcoin-cli)", id="ix_ch03-asciidoc41", range="startofrange")))((("signrawtransaction parancs (bitcoin-cli)", id="ix_ch03-asciidoc42", range="startofrange")))((("tranzakciók","létrehozása parancssorból", id="ix_ch03-asciidoc43", range="startofrange")))((("tranzakciók","aláírása a parancssorból", id="ix_ch03-asciidoc44", range="startofrange")))((("tranzakciók","feladása a parancssorból", id="ix_ch03-asciidoc45", range="startofrange")))((("el nem költött kimenetek, unspent transaction output (UTXO)", id="ix_ch03-asciidoc46", range="startofrange")))A bitcoin tranzakciókban az előző tranzakciók „kimeneteinek” az elköltése történik. Ezáltal egy olyan tranzakciós lánc jön létre, amely a tulajdonjogot az egyik címről a másikra ruházza át. A pénztárcánk épp most fogadott egy olyan tranzakciót, amely egy ilyen kimenetet a mi címünkhöz rendelt hozzá. A tranzakció megerősítése után el tudjuk költeni ezt a kimenetet. 

Először is a +listunspent+ paranccsal a pénztárcánkban lévő összes elköltetlen, _megerősített_ kimenetet íratjuk ki:


----
$ bitcoin-cli listunspent 
----
[source,json]
----
[
    {
        "txid" : "9ca8f969bd3ef5ec2a8685660fdbf7a8bd365524c2e1fc66c309acbae2c14ae3",
        "vout" : 0,
        "address" : "1hvzSofGwT8cjb8JU7nBsCSfEVQX5u9CL",
        "account" : "",
        "scriptPubKey" : "76a91407bdb518fa2e6089fd810235cf1100c9c13d1fd288ac",
        "amount" : 0.05000000,
        "confirmations" : 7
    }
]
----

Láthatjuk, hogy a +9ca8f9…+ tranzakció létrehozott egy kimenetet (0 vout index-szel), amely az +1hvzSo…+ címhez van rendelve, a nagysága 50 mBTC, és már 7 megerősítést kaptunk róla. A tranzakciók az előzőleg létrehozott kimeneteket használják bemenetként oly módon, hogy a tranzakciókra az azonosítójukkal és vout indexükkel hivatkoznak. Most létre fogunk hozni egy tranzakciót, amely a bemenetén egy új címhez rendeli, és ezáltal elkölti a +9ca8f9…+ tranzakció azonosító (txid) 0-ik kimenetét. 

Először vizsgáljuk meg részletesebben az adott kimentet. A +gettxout+ paranccsal a fenti elköltetlen kimenet részleteit írathatjuk ki. A tranzakciós kimenetekre mindig txid és vout alapján lehet hivatkozni, és ezeket a paramétereket adjuk meg a +gettxout+ -nak:


----
$ bitcoin-cli gettxout 9ca8f969bd3ef5ec2a8685660fdbf7a8bd365524c2e1fc66c309acbae2c14ae3 0
----
[source,json]
----
{
    "bestblock" : "0000000000000001405ce69bd4ceebcdfdb537749cebe89d371eb37e13899fd9",
    "confirmations" : 7,
    "value" : 0.05000000,
    "scriptPubKey" : {
        "asm" : "OP_DUP OP_HASH160 07bdb518fa2e6089fd810235cf1100c9c13d1fd2
         OP_EQUALVERIFY OP_CHECKSIG",
        "hex" : "76a91407bdb518fa2e6089fd810235cf1100c9c13d1fd288ac",
        "reqSigs" : 1,
        "type" : "pubkeyhash",
        "addresses" : [
            "1hvzSofGwT8cjb8JU7nBsCSfEVQX5u9CL"
        ]
    },
    "version" : 1,
    "coinbase" : false
}
----

Azt látjuk, hogy a kimenet 50 mBTC-t rendelt hozzá az +1hvz…+ címünkhöz. A kimenet elköltéséhez egy új tranzakciót hozunk létre. Először állítsunk elő egy címet, ahová elküldhetjük a pénzt:


----
$ bitcoin-cli getnewaddress 
1LnfTndy3qzXGN19Jwscj1T8LR3MVe3JDb
----

25 mBTC-t fogunk az újonnan létrehozott +1LnfTn…+ címre elküldeni. Az új tranzakciónkban elköltjük az 50 mBTC-s kimenetet, és 25 mBTC-t küldünk erre az új címre. Mivel az előző tranzakció _egész_ kimenetét el kell költenünk, a visszajáró pénzt is kezelnünk kell. A visszajáró pénzt az +1hzv…+ címre fogjuk visszaküldeni, vagyis ugyanarra a címre, amelyről a pénz származott. Végül tranzakciós díjat is kell fizetnünk a tranzakcióért. A díjat úgy fogjuk megfizetni, hogy a visszajáró összeget 0.5 mBTC-vel csökkentjük, és csak 24.5 mBTC-t küldünk vissza. Az új kimenetek összegének (25 mBTC + 24.5 mBTC = 49.5 mBTC) és a bemenetnek (50 mBTC) a különbségét tranzakciós díjként a bányászok kapják. 

A +createrawtransaction+ parancsot használjuk a fenti tranzakció létrehozására. A +createrawtransaction+ –nak paraméterként a tranzakció bemenetet adjuk meg (vagyis a megerősített tranzakciónkból az 50 mBTC elköltetlen kimenetet), valamint a két tranzakció kimenetet (az új címre küldött pénzt, és az előző címre visszaküldött visszajáró pénzt):

----
$ bitcoin-cli createrawtransaction '[{"txid" : "9ca8f969bd3ef5ec2a8685660fdbf7a8bd365524c2e1fc66c309acbae2c14ae3", "vout" : 0}]' '{"1LnfTndy3qzXGN19Jwscj1T8LR3MVe3JDb": 0.025, "1hvzSofGwT8cjb8JU7nBsCSfEVQX5u9CL": 0.0245}'

0100000001e34ac1e2baac09c366fce1c2245536bda8f7db0f6685862aecf53ebd69f9a89c0000000000ffffffff02a0252600000000001976a914d90d36e98f62968d2bc9bbd68107564a156a9bcf88ac50622500000000001976a91407bdb518fa2e6089fd810235cf1100c9c13d1fd288ac00000000
----

A +createrawtransaction+ parancs egy nyers hexadecimális stringet hoz létre, amely az általunk megadott tranzakció részleteit kódolja. Ellenőrizzük, hogy minden rendben van-e! Dekódoljuk ezt a nyers stringet a +decoderawtransaction+ paranccsal:

----
$ bitcoin-cli decoderawtransaction 0100000001e34ac1e2baac09c366fce1c2245536bda8f7db0f6685862aecf53ebd69f9a89c0000000000ffffffff02a0252600000000001976a914d90d36e98f62968d2bc9bbd68107564a156a9bcf88ac50622500000000001976a91407bdb518fa2e6089fd810235cf1100c9c13d1fd288ac00000000
----
[source,json]
----
{
    "txid" : "0793299cb26246a8d24e468ec285a9520a1c30fcb5b6125a102e3fc05d4f3cba",
    "version" : 1,
    "locktime" : 0,
    "vin" : [
        {
            "txid" : "9ca8f969bd3ef5ec2a8685660fdbf7a8bd365524c2e1fc66c309acbae2c14ae3",
            "vout" : 0,
            "scriptSig" : {
                "asm" : "",
                "hex" : ""
            },
            "sequence" : 4294967295
        }
    ],
    "vout" : [
        {
            "value" : 0.02500000,
            "n" : 0,
            "scriptPubKey" : {
                "asm" : "OP_DUP OP_HASH160 d90d36e98f62968d2bc9bbd68107564a156a9bcf OP_EQUALVERIFY OP_CHECKSIG",
                "hex" : "76a914d90d36e98f62968d2bc9bbd68107564a156a9bcf88ac",
                "reqSigs" : 1,
                "type" : "pubkeyhash",
                "addresses" : [
                    "1LnfTndy3qzXGN19Jwscj1T8LR3MVe3JDb"
                ]
            }
        },
        {
            "value" : 0.02450000,
            "n" : 1,
            "scriptPubKey" : {
                "asm" : "OP_DUP OP_HASH160 07bdb518fa2e6089fd810235cf1100c9c13d1fd2 OP_EQUALVERIFY OP_CHECKSIG",
                "hex" : "76a91407bdb518fa2e6089fd810235cf1100c9c13d1fd288ac",
                "reqSigs" : 1,
                "type" : "pubkeyhash",
                "addresses" : [
                    "1hvzSofGwT8cjb8JU7nBsCSfEVQX5u9CL"
                ]
            }
        }
    ]
}
----

A tranzakció helyesnek látszik! Az új tranzakció „elfogyasztja” a megerősített tranzakció elköltetlen kimenetét, majd elkölti azt két kimenetben, ezek egyike 25 mBTC az új címre, míg a másik 24.5 mBTC visszajáró pénz az eredeti címre. A 0.5 mBTC-s különbség jelenti a tranzakciós díjat, mely annak a bányásznak lesz jóváírva, aki rábukkan a tranzakciónkat is magába foglaló blokkra. 

Mint azt észrevehették, a tranzakció egy üres +scriptSig+-et tartalmaz, mivel még nincs aláírva. Aláírás nélkül a tranzakció értelmetlen, még nem bizonyítottuk, hogy a _miénk_ az a cím, amelyből az elköltetlen kimenet származik. Az aláírás révén eltávolítjuk a kimeneten lévő akadályt, és bizonyítjuk, hogy a kimenet a mi birtokunkban van és el tudjuk költeni. A +signrawtransaction+ parancsot használjuk a tranzakció aláírására. Paraméterként a nyers tranzakció hexadecimális stringjét adjuk meg neki.

[TIP]
====
((("pénztárcák","tranzakciók aláírása")))A titkosított pénztárcákat az aláírás előtt ki kell nyitni, mivel az aláíráshoz szükség van a pénztárcában lévő titkos kulcsokra.
====

----
$ bitcoin-cli walletpassphrase foo 360
$ bitcoin-cli signrawtransaction 0100000001e34ac1e2baac09c366fce1c2245536bda8f7db0f6685862aecf53ebd69f9a89c0000000000ffffffff02a0252600000000001976a914d90d36e98f62968d2bc9bbd68107564a156a9bcf88ac50622500000000001976a91407bdb518fa2e6089fd810235cf1100c9c13d1fd288ac00000000
----
[source,json]
----
{
    "hex" : "0100000001e34ac1e2baac09c366fce1c2245536bda8f7db0f6685862aecf53ebd69f9a89c000000006a47304402203e8a16522da80cef66bacfbc0c800c6d52c4a26d1d86a54e0a1b76d661f020c9022010397f00149f2a8fb2bc5bca52f2d7a7f87e3897a273ef54b277e4af52051a06012103c9700559f690c4a9182faa8bed88ad8a0c563777ac1d3f00fd44ea6c71dc5127ffffffff02a0252600000000001976a914d90d36e98f62968d2bc9bbd68107564a156a9bcf88ac50622500000000001976a91407bdb518fa2e6089fd810235cf1100c9c13d1fd288ac00000000",
    "complete" : true
}
----

A +signrawtransaction+ parancs egy másik hexadecimálisan kódolt nyers tranzakciót ad vissza. Ha látni szeretnénk, hogy mi változott, a +decoderawtransaction+-nal kódolható vissza:


----
$ bitcoin-cli decoderawtransaction 0100000001e34ac1e2baac09c366fce1c2245536bda8f7db0f6685862aecf53ebd69f9a89c000000006a47304402203e8a16522da80cef66bacfbc0c800c6d52c4a26d1d86a54e0a1b76d661f020c9022010397f00149f2a8fb2bc5bca52f2d7a7f87e3897a273ef54b277e4af52051a06012103c9700559f690c4a9182faa8bed88ad8a0c563777ac1d3f00fd44ea6c71dc5127ffffffff02a0252600000000001976a914d90d36e98f62968d2bc9bbd68107564a156a9bcf88ac50622500000000001976a91407bdb518fa2e6089fd810235cf1100c9c13d1fd288ac00000000
----
[source,json]
----
{
    "txid" : "ae74538baa914f3799081ba78429d5d84f36a0127438e9f721dff584ac17b346",
    "version" : 1,
    "locktime" : 0,
    "vin" : [
        {
            "txid" : "9ca8f969bd3ef5ec2a8685660fdbf7a8bd365524c2e1fc66c309acbae2c14ae3",
            "vout" : 0,
            "scriptSig" : {
                "asm" : "304402203e8a16522da80cef66bacfbc0c800c6d52c4a26d1d86a54e0a1b76d661f020c9022010397f00149f2a8fb2bc5bca52f2d7a7f87e3897a273ef54b277e4af52051a0601 03c9700559f690c4a9182faa8bed88ad8a0c563777ac1d3f00fd44ea6c71dc5127",
                "hex" : "47304402203e8a16522da80cef66bacfbc0c800c6d52c4a26d1d86a54e0a1b76d661f020c9022010397f00149f2a8fb2bc5bca52f2d7a7f87e3897a273ef54b277e4af52051a06012103c9700559f690c4a9182faa8bed88ad8a0c563777ac1d3f00fd44ea6c71dc5127"
            },
            "sequence" : 4294967295
        }
    ],
    "vout" : [
        {
            "value" : 0.02500000,
            "n" : 0,
            "scriptPubKey" : {
                "asm" : "OP_DUP OP_HASH160 d90d36e98f62968d2bc9bbd68107564a156a9bcf OP_EQUALVERIFY OP_CHECKSIG",
                "hex" : "76a914d90d36e98f62968d2bc9bbd68107564a156a9bcf88ac",
                "reqSigs" : 1,
                "type" : "pubkeyhash",
                "addresses" : [
                    "1LnfTndy3qzXGN19Jwscj1T8LR3MVe3JDb"
                ]
            }
        },
        {
            "value" : 0.02450000,
            "n" : 1,
            "scriptPubKey" : {
                "asm" : "OP_DUP OP_HASH160 07bdb518fa2e6089fd810235cf1100c9c13d1fd2 OP_EQUALVERIFY OP_CHECKSIG",
                "hex" : "76a91407bdb518fa2e6089fd810235cf1100c9c13d1fd288ac",
                "reqSigs" : 1,
                "type" : "pubkeyhash",
                "addresses" : [
                    "1hvzSofGwT8cjb8JU7nBsCSfEVQX5u9CL"
                ]
            }
        }
    ]
}
----

Most a tranzakcióban használt bemenetek egy +scriptsSig+-et is tartalmaznak. A +scriptSig+ egy digitális aláírás, ami bizonyítja az +1hzv…+ cím tulajdonjogát, és megszünteti a kimeneten lévő akadályt, ami ezáltal elkölthetővé válik. Az aláírás a tranzakciót a bitcoin hálózat bármely csomópontja által ellenőrizhetővé teszi. 

Most küldjük el ezt az újonnan létrehozott tranzakciót a hálózatnak. Ezt a +sendrawtransaction+ paranccsal fogjuk megtenni, amelynek a paramétere a +signrawtransaction+ által létrehozott nyers hexadecimális string lesz. Ez ugyanaz a string, amit épp most dekódoltunk:

----
$ bitcoin-cli sendrawtransaction 0100000001e34ac1e2baac09c366fce1c2245536bda8f7db0f6685862aecf53ebd69f9a89c000000006a47304402203e8a16522da80cef66bacfbc0c800c6d52c4a26d1d86a54e0a1b76d661f020c9022010397f00149f2a8fb2bc5bca52f2d7a7f87e3897a273ef54b277e4af52051a06012103c9700559f690c4a9182faa8bed88ad8a0c563777ac1d3f00fd44ea6c71dc5127ffffffff02a0252600000000001976a914d90d36e98f62968d2bc9bbd68107564a156a9bcf88ac50622500000000001976a91407bdb518fa2e6089fd810235cf1100c9c13d1fd288ac00000000

ae74538baa914f3799081ba78429d5d84f36a0127438e9f721dff584ac17b346
----

A +sendrawtransaction+ parancs egy _tranzakció hasht (txid-t)_ ad vissza, miután feladta a tranzakciót a hálózatnak. Ekkor a +gettransaction+ paranccsal le tudjuk kérdezni ezt a tranzakciót:

----
$ bitcoin-cli gettransaction ae74538baa914f3799081ba78429d5d84f36a0127438e9f721dff584ac17b346
----
[source,json]
----
{
    "amount" : 0.00000000,
    "fee" : -0.00050000,
    "confirmations" : 0,
    "txid" : "ae74538baa914f3799081ba78429d5d84f36a0127438e9f721dff584ac17b346",
    "time" : 1392666702,
    "timereceived" : 1392666702,
    "details" : [
        {
            "account" : "",
            "address" : "1LnfTndy3qzXGN19Jwscj1T8LR3MVe3JDb",
            "category" : "send",
            "amount" : -0.02500000,
            "fee" : -0.00050000
        },
        {
            "account" : "",
            "address" : "1hvzSofGwT8cjb8JU7nBsCSfEVQX5u9CL",
            "category" : "send",
            "amount" : -0.02450000,
            "fee" : -0.00050000
        },
        {
            "account" : "",
            "address" : "1LnfTndy3qzXGN19Jwscj1T8LR3MVe3JDb",
            "category" : "receive",
            "amount" : 0.02500000
        },
        {
            "account" : "",
            "address" : "1hvzSofGwT8cjb8JU7nBsCSfEVQX5u9CL",
            "category" : "receive",
            "amount" : 0.02450000
        }
    ]
}
----

Mint korábban, most is részletesebben megvizsgálhatjuk ezt a tranzakciót a +getrawtransaction+ és a +decoderawtransaction+ parancsokkal. Ezek a parancsok pontosan ugyanazt a hexadecimális stringet adják vissza, mint amit az előtt állítottunk elő és dekódoltunk, mielőtt elküldtük volna a tranzakciót a hálózatnak.(((range="endofrange", startref="ix_ch03-asciidoc46")))(((range="endofrange", startref="ix_ch03-asciidoc45")))(((range="endofrange", startref="ix_ch03-asciidoc44")))(((range="endofrange", startref="ix_ch03-asciidoc43")))(((range="endofrange", startref="ix_ch03-asciidoc42")))(((range="endofrange", startref="ix_ch03-asciidoc41")))(((range="endofrange", startref="ix_ch03-asciidoc40")))(((range="endofrange", startref="ix_ch03-asciidoc39")))(((range="endofrange", startref="ix_ch03-asciidoc38")))(((range="endofrange", startref="ix_ch03-asciidoc37")))(((range="endofrange", startref="ix_ch03-asciidoc36")))(((range="endofrange", startref="ix_ch03-asciidoc35")))(((range="endofrange", startref="ix_ch03-asciidoc34")))(((range="endofrange", startref="ix_ch03-asciidoc33")))(((range="endofrange", startref="ix_ch03-asciidoc32")))(((range="endofrange", startref="ix_ch03-asciidoc31")))(((range="endofrange", startref="ix_ch03-asciidoc7")))(((range="endofrange", startref="ix_ch03-asciidoc6")))(((range="endofrange", startref="ix_ch03-asciidoc5")))(((range="endofrange", startref="ix_ch03-asciidoc2")))(((range="endofrange", startref="ix_ch03-asciidoc1"))) 

[[alt_libraries]]
=== Alternatív kliensek, könyvtárak és eszközkészletek

((("kliensek, alternatív", id="ix_ch03-asciidoc47", range="startofrange")))((("könyvtárak, alternatív", id="ix_ch03-asciidoc48", range="startofrange")))((("eszközkészletek, alternatív", id="ix_ch03-asciidoc49", range="startofrange")))A bitcoind referencia kliensen kívül vannak más kliensek és könyvtárak is, melyekkel kapcsolatba léphetünk a bitcoin hálózattal és az adatstruktúrákkal. Ezek különféle programozási nyelveken lettek megvalósítva, így a programozóknak az általuk használt programozási nyelven kínálnak natív interfészeket. 

Alternatív megvalósítás többek között:

https://github.com/libbitcoin/libbitcoin[libbitcoin]:: ((("libbitcoin könyvtár")))Bitcoin Cross-Platform C++ Development Toolkit
https://github.com/libbitcoin/libbitcoin-explorer[bitcoin explorer]:: ((("Bitcoin Explorer")))Bitcoin parancssori eszköz
https://github.com/libbitcoin/libbitcoin-server[bitcoin server]:: ((("Bitcoin szerver")))Bitcoin teljes csomópont és lekérdező szerver
https://code.google.com/p/bitcoinj/[bitcoinj]:: ((("BitcoinJ könyvtár")))Teljes csomópontot megvalósító Java kliens könyvtár
https://opensource.conformal.com/wiki/btcd[btcd]:: ((("btcd","kliens")))Go nyelvű, teljes csomópontot megvalósító bitcoin kliens
https://bitsofproof.com[Bits of Proof (BOP)]:: ((("Bits of Proof (BOP)")))A bitcoin Java enterprise-zal történő megvalósítása
https://github.com/jgarzik/picocoin[picocoin]:: ((("picocoin")))Egy C-ben megvalósított pehelysúlyú bitcoin kliens könyvtár
https://github.com/vbuterin/pybitcointools[pybitcointools]:: ((("pybitcointools könyvtár")))Python bitcoin könyvtár
https://github.com/richardkiss/pycoin[pycoin]:: ((("pycoin könyvtár")))Egy másik Python bitcoin könyvtár

Számos programozási nyelven sok további könyvtár létezik, és állandóan újabbak születnek. 

[[libbitcoin]]
==== A Libbitcoin és a Bitcoin Explorer

The ((("libbitcoin könyvtár")))((("könyvtárak, alternatív","libbitcoin könyvtár")))libbitcoin könyvtár többféle platformon használható C++ fejlesztő eszköz, amely a ((("Bitcoin Szerver")))((("könyvtárak, alternatív","Bitcoin Server")))egy teljes libbitcoin szerver csomópontot és a ((("Bitcoin Explorer")))((("könyvtárak, alternatív","Bitcoin Explorer")))Bitcoin Explorer (bx) parancssori eszközt valósítja meg.

A bx parancsoknak nagyon sok olyan tulajdonságuk van, mint a fejezetben szemléltetett bitcoind parancsoknak. A bx parancsok között vannak olyan kulcs kezelési és kulcs átalakító eszközök, melyek a bitcoind-ből hiányoznak, pl. a 2-es típusú determinisztikus kulcsok kezelése, a mnemonikus kulcsok kódolása, a lopakodó címek kezelése, fizetési és lekérdezési támogatás.

===== A Bitcoin Explorer installálása

((("Bitcoin Explorer","installálás")))A Bitcoin Explorer installálásához https://github.com/libbitcoin/libbitcoin-explorer/wiki/Download[töltse le a megfelelő operációs rendszerhez tartozó aláírt végrehajtható programot]. Az éles és a teszt hálózatot használó Linux, OS X, és  Windows programok találhatók itt.

A +bx+ paraméterek nélkül begépelésével tudja kiíratni a rendelkezésre álló parancsokat (lásd <<appdx_bx>>).

A Bitcoin Explorer installálóval https://github.com/libbitcoin/libbitcoin-explorer/wiki/Build[a Linux és OS X rendszereken forrásból tudunk fordítani, Windowsban pedig Visual Studio projektekkel]. A források az Autotools használatával kézzel is lefordíthatók. Ezek a ((("libbitcoin könyvtár","installálása")))libbitcoin könyvtári függőséget is installálják.

[TIP]
====
A Bitcoin Explorer-ben sok hasznos parancs van a címek kódolására és dekódolására, valamint különféle formátumok és ábrázolások közötti átalakításokra. Segítségükkel a különféle formátumok, pl. a Base16 (hexadecimális), Base58, Base58Check, Base64, stb. vizsgálhatók.
====

===== A Libbitcoin installálása

((("libbitcoin könyvtár","installálás")))A libbitcoin könyvtár installálóval https://github.com/libbitcoin/libbitcoin-explorer/wiki/Build[a Linux és OS X rendszereken forrásból tudunk fordítani, Windows-ban pedig Visual Studio projektekkel]. A források az Autotools használatával kézzel is lefordíthatók.

[TIP]
====
A Bitcoin Explorer a bx-et és a libbitcoin könyvtárat egyaránt installálja, ezért ha a bx-et forrásból fordítottuk újra, akkor ezt a lépést átugorhatjuk.
====

==== pycoin

((("könyvtárak, alternatív","pycoin könyvtár")))((("pycoin könyvtár")))((("Python","pycoin könyvtár")))A http://github.com/richardkiss/pycoin[_pycoin_] Python könyvtárat eredetileg ((("Kiss, Richard"))) Richard Kiss írta és tartotta karban. A könyvtár a bitcoin kulcsok és tranzakciók kezelését támogatja, és még a script nyelvet támogatja annyira, hogy a nem szabványos tranzakciók kezelése is lehetséges benne. 

A pycoin könyvtár mind a Python 2 (2.7.x), mind a Python 3 (3.3 utáni verziók) támogatására képes, és hasznos parancssori segédprogramjai vannak, pl. a ku és a tx. Ha szeretnénk a  pycoin 0.42-t Python 3 alatt, virtuális környezetben (venv) installálni, használjuk a következőket:

====
----
$ python3 -m venv /tmp/pycoin
$ . /tmp/pycoin/bin/activate
$ pip install pycoin==0.42
Downloading/unpacking pycoin==0.42
  Downloading pycoin-0.42.tar.gz (66kB): 66kB downloaded
  Running setup.py (path:/tmp/pycoin/build/pycoin/setup.py) egg_info for package pycoin
    
Installing collected packages: pycoin
  Running setup.py install for pycoin
    
    Installing tx script to /tmp/pycoin/bin
    Installing cache_tx script to /tmp/pycoin/bin
    Installing bu script to /tmp/pycoin/bin
    Installing fetch_unspent script to /tmp/pycoin/bin
    Installing block script to /tmp/pycoin/bin
    Installing spend script to /tmp/pycoin/bin
    Installing ku script to /tmp/pycoin/bin
    Installing genwallet script to /tmp/pycoin/bin
Successfully installed pycoin
Cleaning up...
$
----
====

Az alábbiakban egy minta Python script látható, amely a pycoin könyvtár segítségével küld bitcoinokat:

====
[source,python]
----
include::code/pycoin_example.py[]
----
====

A ku és tx parancssori eszközök használatát lásd a <<appdxbitcoinimpproposals>> részben.

==== btcd
((("btcd")))((("kliensek, alternatív","btcd")))A btcd egy ((("Go programozási nyelv")))Goban megírt, teljes csomópontot megvalósító bitcoin implementáció. Jelenleg helyesen letölti, ellenőrzi és kiszolgálja a blokkláncot. A blokkok elfogadása a referencia implementáció, a bitcoind pontos szabályai szerint történik (beleértve a hibákat is). Helyesen továbbítja az újonnan kibányászott blokkokat is, karban tartja a tranzakciós készletet és továbbítja azokat a tranzakciókat, melyek még nem lettek blokkba foglalva. Biztosítja, hogy a tranzakciós készletbe (poolba) befogadott összes tranzakció teljesítse a blokklánc által megkövetelt szabályokat, és azoknak a szigorú ellenőrzéseknek a túlnyomó többségét is tartalmazza, amelyek a bányászat követelményei szerint szűrik a tranzakciókat („szabványos” tranzakciók).

A btcd és a bitcoind közötti egyik lényeges különbség az, hogy a btcdben tudatos tervezési döntés eredményeképpen nincs pénztárca funkció. Ez azt jelenti, hogy közvetlenül a btcdvel nem lehet fizetni vagy pénzt fogadni. Ezt a funkciót a btcwallet és a btcgui projektek biztosítják, mindkettő aktív fejlesztés alatt áll. Egy másik figyelemre méltó különbség az, hogy a btcd nem csak a HTTP POST kéréseket támogatja (a bitcoind-hez hasonlóan), hanem a Websocketeket is (ezt részesíti előnyben), és a btcd RPC összeköttetéseinél a TLS alapértelemben engedélyezve van.

===== A btcd installálása

((("btcd","installálás")))A btcd Windows alatti installálása az alábbi msi letöltésével és futtatásával lehetséges: https://github.com/conformal/btcd/releases[GitHub]. Linux alatt a következő parancs futtatható, feltéve, hogy a Go nyelv már installálva van:


----
$ go get github.com/conformal/btcd/...
----

Ha a btcd-t szeretné a legfrissebb verzóira frissíteni, futtassa a következőt:


----
$ go get -u -v github.com/conformal/btcd/...
----

===== A btcd használata

((("btcd","használata")))A btcdnek számos beállítási lehetősége van. Ezeket a következőképpen lehet megnézni: 

[source,bash]
----
$ btcd --help
----

A btcd egy btcctl parancssori segédprogrammal is rendelkezik. Ennek segítségével a btcd RPC-n keresztüli beállítása vagy lekérdező parancsai használhatók. A btcd alapértelemben nem engedélyezi az RPC szerverét, emiatt minimálisan egy RPC felhasználó név és jelszó beállítására van szükség:

* _btcd.conf_:
[source,ini]
----
[Application Options]
rpcuser=myuser
rpcpass=SomeDecentp4ssw0rd
----
* _btcctl.conf_:
[source,ini]
----
[Application Options]
rpcuser=myuser
rpcpass=SomeDecentp4ssw0rd
----

Ha a parancssorból szeretné felülbírálni a konfigurációs állományban lévő értékeket, akkor:

[source,bash]
----
$ btcd -u myuser -P SomeDecentp4ssw0rd
$ btcctl -u myuser -P SomeDecentp4ssw0rd
----

A rendelkezésre álló lehetőségek a következőképpen kilistázhatók ki:(((range="endofrange", startref="ix_ch03-asciidoc49")))(((range="endofrange", startref="ix_ch03-asciidoc48")))(((range="endofrange", startref="ix_ch03-asciidoc47")))(((range="endofrange", startref="ix_ch03-asciidoc0"))) 


----
$ btcctl --help
----

