[[ch03_bitcoin_client]]
== A Bitcoin kliens

=== Bitcoin Core – a referencia implementáció, másképpen a Satoshi kliens

A referencia kliens, más néven a _Bitcoin Core_, a bitcoin.org -ról tölthető le. A referencia kliens valósítja meg a bitcoin rendszer összes jellemzőjét, többek között a pénztárcát, a tranzakció ellenőrzést, mely a tranzakciós főkönyv (a blokklánc) teljes másolata révén valósul meg, és a peer-to-peer hálózat teljes hálózati csomópontját.

A referencia kliens a http://bitcoin.org/en/choose-your-wallet web helyről, a „Bitcoin Core” választásával tölthető le. Az operációs rendszertől függően egy végrehajtható installáló program fog letöltődni. A Windows esetén ez egy ZIP archívum vagy egy EXE végrehajtható program. A MAC OS esetén egy DMG disk kép. A Linux változatok az Ubuntu esetén egy PPA csomagot vagy egy TAR.GZ archívumot tartalmaznak.

[[bitcoin-choose-client]]
.Bitcoin – a bitcoin kliens kiválasztása
image::images/bitcoin-choose-client.png["bitcoin choose client"]

==== Bitcoin Core – a kliens futattása első alkalommal

Ha egy végrehajtható csomagot, például egy EXE, DMG,vagy PPA csomagot töltöttünk le, akkor ugyanúgy installálhatjuk az operációs rendszerünkön, mint bármely más alkalmazást. A Windows esetében futtassuk a programot, és kövessük lépésről lépésre az utasításokat. A Mac OS esetében indítsuk el a DMG-t, és húzzuk a Bitcoin-QT ikont az Alkalmazások mappába. Az Ubuntu esetében kattintsunk duplán a PPA-ra a File Explorer-ben, ennek hatására megnyílik a package manager, amellyel installálható a csomag. Az installálás befejeződése után egy új „Bitcoin-Qt” alkalmazás jelenik meg az alkalmazások között. Az ikonon történő dupla kattintással indítsuk el a bitcoin klienst. 

A Bitcoin Core első futtatásakor megkezdődik a blokklánc letöltése. A letöltési folyamat több napig tarthat. Hagyjuk, hadd fusson a háttérben, amíg meg nem jelenik rajta az egyenleg mellett, hogy „Szinkronban” („Synchronized”), és már nem azt jelzi ki, hogy „Nincs szinkronban” („Out of sync”).

[Tipp]
====
A Bitcoin Core 2009, vagyis a bitcoin hálózat kezdete óta történt összes tranzakció másolatát letölti. Ez egy jó pár gigabyte méretű adathalmaz (2013 végén 16 GB volt a mérete), és pár nap alatt, fokozatosan töltődik le. A kliens a tranzakciók feldolgozására vagy a számla egyenlegek módosítására csak a blokklánc összes adatának letöltése után képes. A letöltés ideje alatt a kliens az egyenleg mellett az jelzi ki, hogy „Nincs szinkronban”, az ablak alján pedig azt, hogy „Szinkronizálás a hálózattal (hh óra lemaradás)”. Ellenőrizze, hogy van-e elég szabad hely a diszken, valamint elég-e a sávszélesség és az idő a kezdeti szinkronizáláshoz.
====
 
[[bitcoin-qt-firstload]]
.– a grafikus felhasználói felület a blokklánc inicializálása során
image::images/bitcoin-qt-firstload.png["bitcoin-qt first run"]

==== Bitcoin Core – a kliens lefordítása a forráskódból

A fejlesztők számára az is egy lehetőség, hogy ZIP archívumkélnt letöltik a teljes forrást, vagy a Github-ról klónozzák a hiteles forráshalmazt. Menjen a https://github.com/bitcoin/bitcoin web helyre, és válassza a „Download ZIP” gombot a jobb oldalról. Vagy eljárhatna úgy is, hogy egy git parancssorral a forráskód egy helyi példányát hozza létre a rendszerén. A lenti példában egy Linux vagy Mac OS alatt kiadott unix-szerű paranccsal klónozzuk a forrás kódot:

----
$ **`git clone https://github.com/bitcoin/bitcoin.git`**
Cloning into 'bitcoin'...
remote: Counting objects: 31864, done.
remote: Compressing objects: 100% (12007/12007), done.
remote: Total 31864 (delta 24480), reused 26530 (delta 19621)
Receiving objects: 100% (31864/31864), 18.47 MiB | 119 KiB/s, done.
Resolving deltas: 100% (24480/24480), done.
$
----

[Tipp]
====
Az utasítások és azok kimenete verzióról verzióra változhat. Kövesse a forráskóddal kapott dokumentációt, még akkor is, ha az különbözik attól, amit itt lát, és ne lepődjön meg akkor sem, ha a képernyőjén megjelenő kimenet kicsit különbözik attól, mint amit az itteni példák tartalmaznak.
====

A klónozási művelet befejeződése után a forráskód halmazról egy teljes helyi másolat lesz a _bitcoin_ könyvtárban. Menjen ebbe a könyvtárba. Gépelje be a +cd bitcoin+ parancsot:

----
$ **`cd bitcoin`**
----
 
Alapértelmezés szerint a helyi példány a legfrisebb kóddal lesz szinkronban, ami akár a bitcoin kliens egy nem stabil vagy „béta” verziója is lehet. A kód lefordítása előtt egy release _tag_ (_cimke_) megadásával egy adott verziót szeretnénk kiválasztani. A tag (cimke) kulcsszó a helyi másolatot a kód gyűjtemény egy adott pillanatképével szinkronizálja. A cimkéket a fejlesztők használják azért, hogy a kód adott verzióját egy verziószámmal megjelelöljék. Először is, a rendelkezésre álló cimkék kiirásához a +git tag+ parancsot használjuk:

----
$ **`git tag`**
v0.1.5
v0.1.6test1
v0.2.0
v0.2.10
v0.2.11
v0.2.12

[... sok egyéb cimke ...]

v0.8.4rc2
v0.8.5
v0.8.6
v0.8.6rc1
v0.9.0rc1
----

A cimkék listája a bitcoin összes kibocsájtott változatát tartalmazza. Megállapodás szerint azoknak a  jelölteknek, melyek tesztelésre szolgálnak,  „rc” az utótagja (ami a _release cadidate_ kezdőbebűiből áll). A stabil változatoknak, melyek éles rendszereken futtathatók, nincs utótagjuk. A fenti listából a legmagasabb verziójú változatot választjuk, ami az adott időpontban a v0.9.0rc1. Ahhoz, hogy a helyi kód ezzel a változattal legyen szinkronban, a +git checkout+ parancsot használjuk: 

----
$ **`git checkout v0.9.0rc1`**
Note: checking out 'v0.9.0rc1'.

HEAD is now at 15ec451... Merge pull request #3605
$
----


A forráskód tartalmazza a dokumentációt is. Nézze át a bitcoin könyvtár README.md állományában található dokumentációt. Ehhez gépelje be a prompt-on: +more README.md+, és lapozásra használja a szóköz billentyűt. Ebben a fejezetben egy parancssori bitcoin klienst fogunk újraépíteni, melyet a Linux-on bitcoind-nek hívnak. Nézze át, hogy hogyan kell az ön platformján a bitcoind parancssori klienst lefordítani, ehhez gépelje be: +more doc/build-unix.md+ . A Mac OSX és a Windows esetében az utasítások a doc könyvtárban, a +build-ox.md+ vagy a +build-msw.md+ állományokban vannak.  

Gondosan nézze át az újraépítés előfeltételeit, melyek a dokumentáció első részében vannak. Ezeknek a könyvtáraknak kell a rendszeren jelen lenni, mielőtt megkezdené a fordítást. Ha az előfeltételek nem teljesülnek, akkor az újraépítési folyamat hibával ér véget. Ha azért van hibA, mert valamelyik előfeltétel nem teljesült, akkor a megfelelő könyvtár installálása után onnan folyatathatÓ a build folyamatot, ahol abbamaradt. Feltéve, hogy az előfeltételek installálva vannak, a az újraépítési folyamat úgy kezdhető el, hogy az +autogen.sh+ scripttel létrehozza az újraépítésre szolgáló scripteket.

[Tipp]
====
A bitcoind build folyamata a 0.9 változat óta az autogen/configure/make rendszert használja. A réggebbi változatok egyszerű Makefile-t használnak, és a lenti példától kissé különböző módon működnek. Kövesse annak a változatnak az utasításait, amelyet szeretne lefordítani. Valószínűleg a 0.9-ben bevezetett autogen/configure/make lesz az összes jövőbeli kódváltozatnál használt rendszer, és a lenti példa ezt a rendszert mutatja be.
====

----
$ **`./autogen.sh`**
configure.ac:12: installing `src/build-aux/config.guess'
configure.ac:12: installing `src/build-aux/config.sub'
configure.ac:37: installing `src/build-aux/install-sh'
configure.ac:37: installing `src/build-aux/missing'
src/Makefile.am: installing `src/build-aux/depcomp'
$ 
----

Az +autogen.sh+ script automatikus konfiguráló scripteket hoz létre, melyek a rendszerből lekérdezik a helyes beállításokat, és biztosítják, hogy a fordításhoz szükséges összes könyvtár rendelkezésre álljon. Ezek közül a legfontosabb a configure script, amely számos különféle lehetőséget ajánl a build folyamat egyedivé tételére. A különféle lehetőségek megjelenítésére gépelje be: +./configure --help+

----
$ **`./configure --help`**

`configure' configures Bitcoin Core 0.9.0 to adapt to many kinds of systems.

Usage: ./configure [OPTION]... [VAR=VALUE]...

To assign environment variables (e.g., CC, CFLAGS...), specify them as
VAR=VALUE.  See below for descriptions of some of the useful variables.

Defaults for the options are specified in brackets.

Configuration:
  -h, --help              display this help and exit
      --help=short        display options specific to this package
      --help=recursive    display the short help of all the included packages
  -V, --version           display version information and exit

[... sok egyéb opció és változó kilistázása ...]

Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]

[... sok egyéb opció ...]

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to <info@bitcoin.org>.

$
----

A +configure+ script lehetővé teszi bizonyos jellemzők engedélyezését vagy tiltását az  +--enable-FEATURE+ és +--disable-FEATURE+ használatával, ahol a +FEATURE+ a fenti listában szereplő jellemző neve. Ebben a fejezetben egy olyan bitcoind klienst építünk, amelynek alapértelmezett jellemzői lesznek. Nem használunk egyetlen egy konfigurálási lehetőséget sem, de érdemes átnézni, hogy a kliensnek milyen egyéb opcionális részei lehetnek. Ezután a configure script futtatásával automatikusan feltérképezzünk, hogy melyek a szükséges könyvtárak, és egy testre szabott build scriptet hozunk létre a rendszerünk számára:


----
$ **`./configure`**
checking build system type... x86_64-unknown-linux-gnu
checking host system type... x86_64-unknown-linux-gnu
checking for a BSD-compatible install... /usr/bin/install -c
checking whether build environment is sane... yes
checking for a thread-safe mkdir -p... /bin/mkdir -p
checking for gawk... no
checking for mawk... mawk
checking whether make sets $(MAKE)... yes

[... sok egyéb vizsgált rendszerjellemző  ...]

configure: creating ./config.status
config.status: creating Makefile
config.status: creating src/Makefile
config.status: creating src/test/Makefile
config.status: creating src/qt/Makefile
config.status: creating src/qt/test/Makefile
config.status: creating share/setup.nsi
config.status: creating share/qt/Info.plist
config.status: creating qa/pull-tester/run-bitcoind-for-test.sh
config.status: creating qa/pull-tester/build-tests.sh
config.status: creating src/bitcoin-config.h
config.status: executing depfiles commands
$
----

Ha minden jól megy, akkor a +configure+ parancs úgy ér véget, hogy egy testre szabott build scriptet hoz létre, amellyel lefordítható a bitcoind. Ha hiányzó könyvtárak vagy hibák vannak, akkor a +configure+ parancs hibával ér véget, és nem hozza létre a fenti példában láátható build scripteket. Ha hiba történik, annak a legvalószínübb oka egy hiányzó vagy nem kompatibilis könyvtár. Nézze át ismét az újraépítésre vonatkozó dokumentációt, és installálja a hiányzó előfeltételeket. Azután futtassa le ismét az +configure+ –t, és nézze meg, hogy elmúlt-e a hiba. Ezután fordítsa le a forráskódot – ez a folyamat akár egy óráig is tarthat. A fordítás során néhány másodpercenként vagy néhány percenként megjelenik valami – vagy hibaüzenetet kap, ha valami baj van. A fordítási folyamat bármikor folytatható, ha félbeszakadt. A fordítás megkezdéséhez gépelje be, hogy +make+ :

----
$ **`make`**
Making all in src
make[1]: Entering directory `/home/ubuntu/bitcoin/src'
make  all-recursive
make[2]: Entering directory `/home/ubuntu/bitcoin/src'
Making all in .
make[3]: Entering directory `/home/ubuntu/bitcoin/src'
  CXX    addrman.o
  CXX    alert.o
  CXX    rpcserver.o
  CXX    bloom.o
  CXX    chainparams.o

[... sok egyéb fordítási üzenet ...]

  CXX    test_bitcoin-wallet_tests.o
  CXX    test_bitcoin-rpc_wallet_tests.o
  CXXLD  test_bitcoin
make[4]: Leaving directory `/home/ubuntu/bitcoin/src/test'
make[3]: Leaving directory `/home/ubuntu/bitcoin/src/test'
make[2]: Leaving directory `/home/ubuntu/bitcoin/src'
make[1]: Leaving directory `/home/ubuntu/bitcoin/src'
make[1]: Entering directory `/home/ubuntu/bitcoin'
make[1]: Nothing to be done for `all-am'.
make[1]: Leaving directory `/home/ubuntu/bitcoin'
$ 
----

{
Ubuntu 12.04 LTS alatt a bitcoind fordításához szükséges parancsok:
$ **`sudo apt-get install autoconf`**
$ **`./autogen.sh`**
$ **`sudo apt-get install git-core build-essential libssl-dev libboost-all-dev libdb-dev libdb++-dev libgtk2.0-dev`**
$ **`./configure --with-incompatible-bdb`**
$ **`make`**
(A fordító megjegyzése)
}


Ha minden jól megy, akkor a bitcoind lefordul. Az utolsó lépés az, hogy a bitcoind végrehajtható programot a +make+ paranccsal a rendszer path-ba installáljuk:

----
$ **`sudo make install`**
Making install in src
Making install in .
 /bin/mkdir -p '/usr/local/bin'
  /usr/bin/install -c bitcoind bitcoin-cli '/usr/local/bin'
Making install in test
make  install-am
 /bin/mkdir -p '/usr/local/bin'
  /usr/bin/install -c test_bitcoin '/usr/local/bin'
$
----

A következőképpen bizonyosodhatunk meg arról, hogy a bitcoind helyesen van installálva:

----
$ **`which bitcoind`**
/usr/local/bin/bitcoind
----

Az alapértelemzés szerinti installálás a bitcoind-t a +/usr/local/bin+ könyvtárba teszi. Amikor a bitcoind-t először futtatjuk, akkor emlékeztet minket arra, hogy egy konfigurációs állományt kell létrehoznunk, melyben a JSON-RPC interface számára egy erős jelszó van megadva. Futtassunk a bitcoind-t a +bitcoind+ terminálon történő begépelésével:

----
$ **`bitcoind`**
Error: To use the "-server" option, you must set a rpcpassword in the configuration file:
/home/ubuntu/.bitcoin/bitcoin.conf
It is recommended you use the following random password:
rpcuser=bitcoinrpc
rpcpassword=2XA4DuKNCbtZXsBQRRNDEwEY2nM6M4H9Tx5dFjoAVVbK
(you do not need to remember this password)
The username and password MUST NOT be the same.
If the file does not exist, create it with owner-readable-only file permissions.
It is also recommended to set alertnotify so you are notified of problems;
for example: alertnotify=echo %s | mail -s "Bitcoin Alert" admin@foo.com
----

Szerkesszük meg a konfigurációs állományt egy általunk ismert szerkesztő programmal, és jelszónak adjunk meg egy erős jelszót, ahogyan azt a bitcoind javasolta. *Ne* használjuk a fenti jelszót. A +.bitcoin+ könyvtáron belül hozzunk létre egy +bitcoin.conf+ állományt, és adjuk meg a felhasználói nevet és jelszót:

----
rpcuser=bitcoinrpc
rpcpassword=2XA4DuKNCbtZXsBQRRNDEwEY2nM6M4H9Tx5dFjoAVVbK
----

=== A bitcoind használata a parancssorból

A bitcoind referencia kliens a parancssorból számos parancsot képes végrehajtani. Ezek ugyanazok a parancsok, melyek a JSON-RPC API-nál használhatók, ezért a parancssor lehetővé teszi, hogy interaktív módon kísérletezzünk azokkal a lehetőségekkel, melyek egy programból is használhatók. Indulásként a +help+ parancs kiadásával meg tudjuk jeleníteni a rendelkezésre álló bitcoin parancsok listáját:


[[bitcoind_commands]]
.Bitcoind parancslista
----
addmultisigaddress nrequired ["key",...] ( "account" )
addnode "node" "add|remove|onetry"
backupwallet "destination"
createmultisig nrequired ["key",...]
createrawtransaction [{"txid":"id","vout":n},...] {"address":amount,...}
decoderawtransaction "hexstring"
decodescript "hex"
dumpprivkey "bitcoinaddress"
dumpwallet "filename"
encryptwallet "passphrase"
getaccount "bitcoinaddress"
getaccountaddress "account"
getaddednodeinfo dns ( "node" )
getaddressesbyaccount "account"
getbalance ( "account" minconf )
getbestblockhash
getblock "hash" ( verbose )
getblockcount
getblockhash index
getblocktemplate ( "jsonrequestobject" )
getconnectioncount
getdifficulty
getgenerate
gethashespersec
getinfo
getmininginfo
getnettotals
getnetworkhashps ( blocks height )
getnewaddress ( "account" )
getpeerinfo
getrawchangeaddress
getrawmempool ( verbose )
getrawtransaction "txid" ( verbose )
getreceivedbyaccount "account" ( minconf )
getreceivedbyaddress "bitcoinaddress" ( minconf )
gettransaction "txid"
gettxout "txid" n ( includemempool )
gettxoutsetinfo
getunconfirmedbalance
getwork ( "data" )
help ( "command" )
importprivkey "bitcoinprivkey" ( "label" rescan )
importwallet "filename"
keypoolrefill ( newsize )
listaccounts ( minconf )
listaddressgroupings
listlockunspent
listreceivedbyaccount ( minconf includeempty )
listreceivedbyaddress ( minconf includeempty )
listsinceblock ( "blockhash" target-confirmations )
listtransactions ( "account" count from )
listunspent ( minconf maxconf  ["address",...] )
lockunspent unlock [{"txid":"txid","vout":n},...]
move "fromaccount" "toaccount" amount ( minconf "comment" )
ping
sendfrom "fromaccount" "tobitcoinaddress" amount ( minconf "comment" "comment-to" )
sendmany "fromaccount" {"address":amount,...} ( minconf "comment" )
sendrawtransaction "hexstring" ( allowhighfees )
sendtoaddress "bitcoinaddress" amount ( "comment" "comment-to" )
setaccount "bitcoinaddress" "account"
setgenerate generate ( genproclimit )
settxfee amount
signmessage "bitcoinaddress" "message"
signrawtransaction "hexstring" ( [{"txid":"id","vout":n,"scriptPubKey":"hex","redeemScript":"hex"},...] ["privatekey1",...] sighashtype )
stop
submitblock "hexdata" ( "jsonparametersobject" )
validateaddress "bitcoinaddress"
verifychain ( checklevel numblocks )
verifymessage "bitcoinaddress" "signature" "message"
----

==== A bitcoind futtatása

Commands: -daemon, getinfo
Parancsok: -daemon, getinfo

Most indítsuk el a bitcoin klienst. Az első futtatáskor újra fog épülni a bitcoin blokklánc. Ez egy sok gigabyte-os állomány, és a teljes letöltése átlagosan 2 napig tart. A blokklánc inicializálási idő lerövidíthető, ha a blokklánc egy részleges másolatát bittorrent segítségével a +http://sourceforge.net/projects/bitcoin/files/Bitcoin/blockchain/+ helyről letöltjük. 

Futtassuk a bitcoind-t a háttérben, a +-daemon+ opció megadásával:

----
$ **`bitcoind -daemon`**
$
Bitcoin version v0.9.0rc1-beta (2014-01-31 09:30:15 +0100)
Using OpenSSL version OpenSSL 1.0.1c 10 May 2012
Default data directory /home/bitcoin/.bitcoin
Using data directory /bitcoin/
Using at most 4 connections (1024 file descriptors available)
init message: Verifying wallet...
dbenv.open LogDir=/bitcoin/database ErrorFile=/bitcoin/db.log
Bound to [::]:8333
Bound to 0.0.0.0:8333
init message: Loading block index...
Opening LevelDB in /bitcoin/blocks/index
Opened LevelDB successfully
Opening LevelDB in /bitcoin/chainstate
Opened LevelDB successfully

[... további indulási üzenetek ...]

----

A bitcoin +getinfo+ parancsával a bitcoin hálózati csomópontról, a pénztárcáról és a blokklánc adatbázisról irathatók ki a legfontosabb adatok:

----
$ **`bitcoind getinf`**
{
    "version" : 90000,
    "protocolversion" : 70002,
    "walletversion" : 60000,
    "balance" : 0.00000000,
    "blocks" : 286216,
    "timeoffset" : -72,
    "connections" : 4,
    "proxy" : "",
    "difficulty" : 2621404453.06461525,
    "testnet" : false,
    "keypoololdest" : 1374553827,
    "keypoolsize" : 101,
    "paytxfee" : 0.00000000,
    "errors" : ""
}
----

Az adatokat JavaScript Object Notation (JSON) formátumban kapjuk vissza. Ezt a formátumot az összes programozási nyelv könnyen „megérti”, ugyanakkor emberek számra is egész olvasható. Az adatok között látjuk a bitcoin kliens szoftver verzióját (90000), a protokol verzióját (70002), és a pénztárca verzióját (60000). Látjuk a pénztárcában lévő aktuális egyenleget, amely nulla. Látjuk a blokk magasságot (286216), amely azt mutatja, hogy a hány blokkot ismert a kliens. Láthatunk még a bitcoin hálózatra és a kliens belállítására vonatkozó különféle statisztikákat. A beállításokat a fejezet hátrelévő részében részletesebben megvizsgáljuk. 

[Tipp]
====
Eltarthat némi ideig, akár több napig is, amíg a bitcoind kliens „beéri” az aktuális blokklánc magasságot, miközben blokkokat tölt le a többi bitcoin klienstől. A folyamat menete úgy ellenőrizhető, hogy a getinfo-val kiiratjuk az ismert blokkok számát.
====

==== A pénztárca beállítása és titkosítása 

Commands: bitcoind encryptwallet, walletpassphrase
Parancsok: bitcoind encryptwallet, walletpassphrase

Mielőtt tovább folytatnánk a kulcsok létrehozásával és más parancsokkal, először egy jelszóval fogjuk titkosítani a pénztárcát. Ennél a példánál az +encryptwallet+ parancsot és a „foo” jelszót használjuk. Természetesen a „foo” jelszavat az önök pénztárcájánál egy erős és összetett jelszóval kell helyettesíteni!

----
$ **`bitcoind encryptwallet foo`**
wallet encrypted; Bitcoin server stopping, restart to run with encrypted wallet. The keypool has been flushed, you need to make a new backup.
$
----

Úgy tudjuk ellőrizni, hogy titkosított lett-e a pénztárca, hogy ismét lefuttatjuk a +getinfo+ parancsot. Ezúttal egy új sort is láthatunk, az +unlocked_until+ sort, amely azt mutatja, hogy mennyi ideig lesz a pénztárca kikódoló jelszó a memóriában, és mennyi ideig fogja a pénztárcát nyitva tartani. Először  nulla lesz az értéke, ami azt jelenti, hogy a pénztárca zárolva van:

----
$ **`bitcoind getinfo`**
{
    "version" : 90000,

[... egyéb adatok ...]

    "unlocked_until" : 0,
    "errors" : ""
}
$
----

A pénztárca zárolásának feloldásához adjuk ki a +walletpassphrase+ parancsot, melynek két paramétere van: a jelszó, és egy szám, amely azt mutatja, hogy hány másodperc múlva záródik be automatikusan a pénztárca (idő számláló):

----
$ **`bitcoind walletpassphrase foo 360`**
$
----

A +getinfo+ ismételt futtatásával nézzük meg, hogy kinyílt-e a pénztárca, és mennyi a lejárati idő:

----
$ **`bitcoind getinfo`**
{
    "version" : 90000,

[... other information ...]

    "unlocked_until" : 1392580909,
    "errors" : ""
}
----

==== A pénztárca biztonsági mentése, egyszerű szövegént történő kivitele és visszaállítása

Commands: backupwallet, importwallet, dumpwallet
Parancsok: backupwallet, importwallet, dumpwallet

Ezután gyakorolni fogjuk, hogy lehet a pénztárcáról biztonsági mentést készíteni, és hogyan lehet a biztonsági mentésből visszaállítani a pénztárcát. A mentéshez a +backupwallet+ parancs használható, melynek paramétere egy állománynév. Például mentsük el a pénztárcát a +wallet.backup+ állományba:

----
$ **`bitcoind backupwallet wallet.backup`**
$
----

A pénztárca visszaállításához használjuk az +importwallet+ parancsot. Ha a pénztárca zárolva van, akkor a biztonsági mentés visszaimportálása előtt először meg kell szüntetni a zárolását (lásd a fenti +walletpassphrase+ parancsot).

----
$ **`bitcoind importwallet wallet.backup`**
$
----

A +dumpwallet+ paranccsal a pénztárca egy olvasható szöveges állományba vihető ki:

----
$ **`bitcoind dumpwallet wallet.txt`**
$ **`more wallet.txt`**
# Wallet dump created by Bitcoin v0.9.0rc1-beta (2014-01-31 09:30:15 +0100)
# * Created on 2014-02- 8dT20:34:55Z
# * Best block at time of backup was 286234 (0000000000000000f74f0bc9d3c186267bc45c7b91c49a0386538ac24c0d3a44),
#   mined on 2014-02- 8dT20:24:01Z

KzTg2wn6Z8s7ai5NA9MVX4vstHRsqP26QKJCzLg4JvFrp6mMaGB9 2013-07- 4dT04:30:27Z change=1 # addr=16pJ6XkwSQv5ma5FSXMRPaXEYrENCEg47F
Kz3dVz7R6mUpXzdZy4gJEVZxXJwA15f198eVui4CUivXotzLBDKY 2013-07- 4dT04:30:27Z change=1 # addr=17oJds8kaN8LP8kuAkWTco6ZM7BGXFC3gk
[... és sok más további kulcs  ...]

$
----

==== Pénztárca címek és pénzt fogadó tranzakciók

Commands: getnewaddress, getreceivedbyaddress, listtransactions, getaddressesbyaccount, getbalance
Parancsok: getnewaddress, getreceivedbyaddress, listtransactions, getaddressesbyaccount, getbalance

A bitcoin referencia kliens nyilvántart egy címhalmazt, melynek mérete a +getinfo+ parancs használatakor a +keypoolsize+ -nál jelenik meg. Ezeket a címeket automatikusan állította elő a kliens, és nyilvános pénz fogadó címként vagy visszajáró pénz címként használhatók. A +getnewaddress+ parancs használható, ha szeretnénk az egyik ilyen címet kijelezni:

----
$ **`bitcoind getnewaddress`**
1hvzSofGwT8cjb8JU7nBsCSfEVQX5u9CL
----

Ennek a címnek a használatával egy külső pénztárcából egy kis mennyiségű bitcoint küldhetünk a bitcoind pénztárcánkba (feltéve, hogy már van némi bitcoinunk egy tőzsdén, egy web-es pénztárcában vagy egy másik bitcoind pénztárcában). Példánkban 50 milliBitet (0.050 bitcoint) küldünk a fent visszaadott címre. 

Ezután lekérdezhetjük a bitcoind klienstől, hogy mennyi pénz jött erre a címre, és megadhatjuk, hogy hány darab megerősítésre van szükség ahhoz, hogy a pénzt beszámítsa az egyenlegbe. Példánkban nulla megerősítést fogunk megadni. Néhány másodperccel azt követően, hogy a másik pénztárcából elküldtük a bitcoint, már látjuk, hogy megjelent a pénztárcában. A +getreceivedbyaddress+ parancsot fogjuk használni a fenti címmel, és nulla megerősítési számmal:

----
$ **`bitcoind getreceivedbyaddress 1hvzSofGwT8cjb8JU7nBsCSfEVQX5u9CL 0`**
0.05000000
----

Ha a nullát elhagyjuk a parancs végéről, akkor csak azokat az összegeket fogjuk látni, melyeknek legalább +minconf+ megerősítése van, ahol a +minconf+ a beállítás azt határozza meg, hogy legalább hány darab megerősítés szükséges ahhoz, hogy a tranzakció megjelenjen az egyenlegben. A +miniconf+ beállítás a bitcoind konfigurációs állományában található. Mivel a bitcoin küldő tranzakció csak az utolsó pár másodpercben érkezett meg, még nincs megerősítve, és emiatt a parancs nulla egyenleget fog kiírni:

----
$ **`bitcoind getreceivedbyaddress 1hvzSofGwT8cjb8JU7nBsCSfEVQX5u9CL`**
0.00000000
----

A +listtransactions+ paranccsal a pénztárca által fogadott összes tranzakció is kijelezhető:

----
$ **`bitcoind listtransactions`**
[
    {
        "account" : "",
        "address" : "1hvzSofGwT8cjb8JU7nBsCSfEVQX5u9CL",
        "category" : "receive",
        "amount" : 0.05000000,
        "confirmations" : 0,
        "txid" : "9ca8f969bd3ef5ec2a8685660fdbf7a8bd365524c2e1fc66c309acbae2c14ae3",
        "time" : 1392660908,
        "timereceived" : 1392660908
    }
]

----

A +getaddressbyaccount+ paranccsal kilistázhatjuk a pénztárcához tartozó összes címet is:

----
$ **`bitcoind getaddressesbyaccount ""`**
[
    "1LQoTPYy1TyERbNV4zZbhEmgyfAipC6eqL",
    "17vrg8uwMQUibkvS2ECRX4zpcVJ78iFaZS",
    "1FvRHWhHBBZA8cGRRsGiAeqEzUmjJkJQWR",
    "1NVJK3JsL41BF1KyxrUyJW5XHjunjfp2jz",
    "14MZqqzCxjc99M5ipsQSRfieT7qPZcM7Df",
    "1BhrGvtKFjTAhGdPGbrEwP3xvFjkJBuFCa",
    "15nem8CX91XtQE8B1Hdv97jE8X44H3DQMT",
    "1Q3q6taTsUiv3mMemEuQQJ9sGLEGaSjo81",
    "1HoSiTg8sb16oE6SrmazQEwcGEv8obv9ns",
    "13fE8BGhBvnoy68yZKuWJ2hheYKovSDjqM",
    "1hvzSofGwT8cjb8JU7nBsCSfEVQX5u9CL",
    "1KHUmVfCJteJ21LmRXHSpPoe23rXKifAb2",
    "1LqJZz1D9yHxG4cLkdujnqG5jNNGmPeAMD"
]
----

Végül a +getbalance+ parancs a pénztárca egészének egyenlegét mutatja, vagyis összeadja az összes olyan tranzakciót, amely legalább +minconf+ megerősítéssel rendelkezik:

----
$ **`bitcoind getbalance`**
0.05000000
----

[Tipp]
====
Ha a tranzakció még nem lett megerősítve, akkor a getbalance nulla egyenleget fog mutatni. A „minconf” konfigurációs opció határozza meg, hogy hány darab megerősítésre van szükség ahhoz, hogy a trazakció megjelenjen az egyenlegben.
====


==== Tranzakciók vizsgálata és dekódolása

Commands: gettransaction, getrawtransaction, decoderawtransaction
Parancsok: gettransaction, getrawtransaction, decoderawtransaction

Vizsgáljuk meg azt a bejövő tranzakciót, amit a fenti +listtransactions+ paranccsal kilistáztunk. A tranzakciót a +gettransaction+ paranccsal tudjuk kilistázni oly módon, hogy megadjuk a tranzakció hash értékét (zanzáját) a +txid+ helyén:

----
$ **`bitcoind gettransaction 9ca8f969bd3ef5ec2a8685660fdbf7a8bd365524c2e1fc66c309acbae2c14ae3`**
{
    "amount" : 0.05000000,
    "confirmations" : 0,
    "txid" : "9ca8f969bd3ef5ec2a8685660fdbf7a8bd365524c2e1fc66c309acbae2c14ae3",
    "time" : 1392660908,
    "timereceived" : 1392660908,
    "details" : [
        {
            "account" : "",
            "address" : "1hvzSofGwT8cjb8JU7nBsCSfEVQX5u9CL",
            "category" : "receive",
            "amount" : 0.05000000
        }
    ]
}
----

[Tipp]
====
A tranzakció azonosítók mindaddig nem hitelesek, amíg a tranzakció megerősítésre nem került. Ha a blokkláncban hiányzik a tranzakció azonosító, az nem jelenti azt, hogy a tranzakció nem lett feldolgozva. Ez az ú.n. „tranzakció képlékenység”, mivel a tranzakció hashek azt megelőzően, hogy megerősítésre kerülnének egy blokkban, még módosíthatók. A megerősítés után a txid megváltoztathatatlan és hiteles.
====

A +gettransaction+ által fent kijelzett tranzakció egy egyszerűsített alak. A teljes tranzakció kód visszanyeréséhez és dekódolásához két parancsot fogunk használni, a +getrawtransaction+ és a +decoderawtransaction+ parancsot. Először, a +getrawtransaction+ parancsnak paraméterként megadjuk a _tranzakció hash-t (txid-t)_, a parancs pedig „nyers” hexa stringként a teljes tranzakciót visszaadja, pontosan úgy, ahogyan az a bitcoin hálózatban megtalálható:

----
$ **`bitcoind getrawtransaction 9ca8f969bd3ef5ec2a8685660fdbf7a8bd365524c2e1fc66c309acbae2c14ae3`**
0100000001d717279515f88e2f56ce4e8a31e2ae3e9f00ba1d0add648e80c480ea22e0c7d3000000008b483045022100a4ebbeec83225dedead659bbde7da3d026c8b8e12e61a2df0dd0758e227383b302203301768ef878007e9ef7c304f70ffaf1f2c975b192d34c5b9b2ac1bd193dfba2014104793ac8a58ea751f9710e39aad2e296cc14daa44fa59248be58ede65e4c4b884ac5b5b6dede05ba84727e34c8fd3ee1d6929d7a44b6e111d41cc79e05dbfe5ceaffffffff02404b4c00000000001976a91407bdb518fa2e6089fd810235cf1100c9c13d1fd288ac1f312906000000001976a914107b7086b31518935c8d28703d66d09b3623134388ac00000000
----

Ennek a hexa stringnek a dekódolására a +decoderawtransaction+ parancs használható. Másoljuk a hexa stringet a +decoderawtransaction+ első paraméterének a helyébe, ha a teljes tartalmat JSON adatstruktúraként szeretnénk megjeleníteni (formattálási okok miatt a hexa string a lenti példában rövidítve szerepel):

----
$ **`bitcoind decoderawtransaction 0100000001d717...388ac00000000`**
{
    "txid" : "9ca8f969bd3ef5ec2a8685660fdbf7a8bd365524c2e1fc66c309acbae2c14ae3",
    "version" : 1,
    "locktime" : 0,
    "vin" : [
        {
            "txid" : "d3c7e022ea80c4808e64dd0a1dba009f3eaee2318a4ece562f8ef815952717d7",
            "vout" : 0,
            "scriptSig" : {
                "asm" : "3045022100a4ebbeec83225dedead659bbde7da3d026c8b8e12e61a2df0dd0758e227383b302203301768ef878007e9ef7c304f70ffaf1f2c975b192d34c5b9b2ac1bd193dfba201 04793ac8a58ea751f9710e39aad2e296cc14daa44fa59248be58ede65e4c4b884ac5b5b6dede05ba84727e34c8fd3ee1d6929d7a44b6e111d41cc79e05dbfe5cea",
                "hex" : "483045022100a4ebbeec83225dedead659bbde7da3d026c8b8e12e61a2df0dd0758e227383b302203301768ef878007e9ef7c304f70ffaf1f2c975b192d34c5b9b2ac1bd193dfba2014104793ac8a58ea751f9710e39aad2e296cc14daa44fa59248be58ede65e4c4b884ac5b5b6dede05ba84727e34c8fd3ee1d6929d7a44b6e111d41cc79e05dbfe5cea"
            },
            "sequence" : 4294967295
        }
    ],
    "vout" : [
        {
            "value" : 0.05000000,
            "n" : 0,
            "scriptPubKey" : {
                "asm" : "OP_DUP OP_HASH160 07bdb518fa2e6089fd810235cf1100c9c13d1fd2 OP_EQUALVERIFY OP_CHECKSIG",
                "hex" : "76a91407bdb518fa2e6089fd810235cf1100c9c13d1fd288ac",
                "reqSigs" : 1,
                "type" : "pubkeyhash",
                "addresses" : [
                    "1hvzSofGwT8cjb8JU7nBsCSfEVQX5u9CL"
                ]
            }
        },
        {
            "value" : 1.03362847,
            "n" : 1,
            "scriptPubKey" : {
                "asm" : "OP_DUP OP_HASH160 107b7086b31518935c8d28703d66d09b36231343 OP_EQUALVERIFY OP_CHECKSIG",
                "hex" : "76a914107b7086b31518935c8d28703d66d09b3623134388ac",
                "reqSigs" : 1,
                "type" : "pubkeyhash",
                "addresses" : [
                    "12W9goQ3P7Waw5JH8fRVs1e2rVAKoGnvoy"
                ]
            }
        }
    ]
}
----

A tranzakció dekódolás a tranzakció összes részét megjeleníti, többek között a tranzakció bemeneteket és kimeneteket. Ebben az esetben azt látjuk, hogy a tranzakció, amely 50 milliBitet írt jóvá az új címünkre, egy bemenetet és két kimenetet használt. A tranzakció bemenete egy előzőleg megerősített tranzakció kimenete volt (amely fent a +d3c7+ kezdetű vin txid-ként szerepel). A két kiemenet megfelel az 50 milliBit jóváírásnak és a feladónak visszajáró pénzt tartalmazó kimenetnek. 

A tranzakcióban a txid-jével hivatkozott előző tranzakciót ugyanezzel a paranccsal (vagyis a +gettransaction+ paranccsal) vizsgálhatjuk meg. Tranzakcióról tranzakcióra visszafelé ugorva nyomon követhetjük a tranzakcióláncon, hogy címről címre hogyan lettek továbbítva az érmék.  

Ha az általunk fogadott tranzakció megerősítésre került, és be lett foglalva egy blokkba, akkor a +gettransaction+ parancs további adatokat szolgáltat: megmutatja azt a _block hash-t (azonosítót)_, amelybe bele lett foglalva a tranzakció:

----
$ **`bitcoind gettransaction 9ca8f969bd3ef5ec2a8685660fdbf7a8bd365524c2e1fc66c309acbae2c14ae3`**
{
    "amount" : 0.05000000,
    "confirmations" : 1,
    "blockhash" : "000000000000000051d2e759c63a26e247f185ecb7926ed7a6624bc31c2a717b",
    "blockindex" : 18,
    "blocktime" : 1392660808,
    "txid" : "9ca8f969bd3ef5ec2a8685660fdbf7a8bd365524c2e1fc66c309acbae2c14ae3",
    "time" : 1392660908,
    "timereceived" : 1392660908,
    "details" : [
        {
            "account" : "",
            "address" : "1hvzSofGwT8cjb8JU7nBsCSfEVQX5u9CL",
            "category" : "receive",
            "amount" : 0.05000000
        }
    ]
}
----

Fent az egyik új információ a +blockhash+, ami annak a blocknak a hashe (zanzája), amibe a tranzakció be lett foglalva, a másik pedig a +blockindex+, melynek értéke (18) azt mutatja, hogy a tranzakciónk a blokk 18. tranzakciója.  

==== Blokkok vizsgálata

Commands: getblock, getblockhash
Parancsok: getblock, getblockhash

Most, hogy tudjuk, melyik blokkba lett befoglalva a tranzakciónk, le tudjuk kérdezni ezt a blokkot. A +getblock+ parancsot használjuk, és paraméterként a blokk hashét (zanzáját) adjuk meg:

----
$ **`bitcoind getblock 000000000000000051d2e759c63a26e247f185ecb7926ed7a6624bc31c2a717b true`**
{
    "hash" : "000000000000000051d2e759c63a26e247f185ecb7926ed7a6624bc31c2a717b",
    "confirmations" : 2,
    "size" : 248758,
    "height" : 286384,
    "version" : 2,
    "merkleroot" : "9891747e37903016c3b77c7a0ef10acf467c530de52d84735bd55538719f9916",
    "tx" : [
        "46e130ab3c67d31d2b2c7f8fbc1ca71604a72e6bc504c8a35f777286c6d89bf0",
        "2d5625725b66d6c1da88b80b41e8c07dc5179ae2553361c96b14bcf1ce2c3868",
        "923392fc41904894f32d7c127059bed27dbb3cfd550d87b9a2dc03824f249c80",
        "f983739510a0f75837a82bfd9c96cd72090b15fa3928efb9cce95f6884203214",
        "190e1b010d5a53161aa0733b953eb29ef1074070658aaa656f933ded1a177952",
        "ee791ec8161440262f6e9144d5702f0057cef7e5767bc043879b7c2ff3ff5277",
        "4c45449ff56582664abfadeb1907756d9bc90601d32387d9cfd4f1ef813b46be",
        "3b031ed886c6d5220b3e3a28e3261727f3b4f0b29de5f93bc2de3e97938a8a53",
        "14b533283751e34a8065952fd1cd2c954e3d37aaa69d4b183ac6483481e5497d",
        "57b28365adaff61aaf60462e917a7cc9931904258127685c18f136eeaebd5d35",
        "8c0cc19fff6b66980f90af39bee20294bc745baf32cd83199aa83a1f0cd6ca51",
        "1b408640d54a1409d66ddaf3915a9dc2e8a6227439e8d91d2f74e704ba1cdae2",
        "0568f4fad1fdeff4dc70b106b0f0ec7827642c05fe5d2295b9deba4f5c5f5168",
        "9194bfe5756c7ec04743341a3605da285752685b9c7eebb594c6ed9ec9145f86",
        "765038fc1d444c5d5db9163ba1cc74bba2b4f87dd87985342813bd24021b6faf",
        "bff1caa9c20fa4eef33877765ee0a7d599fd1962417871ca63a2486476637136",
        "d76aa89083f56fcce4d5bf7fcf20c0406abdac0375a2d3c62007f64aa80bed74",
        "e57a4c70f91c8d9ba0ff0a55987ea578affb92daaa59c76820125f31a9584dfc",
        "9ca8f969bd3ef5ec2a8685660fdbf7a8bd365524c2e1fc66c309acbae2c14ae3",

[... sok egyéb tranzakció ...]

    ],
    "time" : 1392660808,
    "nonce" : 3888130470,
    "bits" : "19015f53",
    "difficulty" : 3129573174.52228737,
    "chainwork" : "000000000000000000000000000000000000000000001931d1658fc04879e466",
    "previousblockhash" : "0000000000000000177e61d5f6ba6b9450e0dade9f39c257b4d48b4941ac77e7",
    "nextblockhash" : "0000000000000001239d2c3bf7f4c68a4ca673e434702a57da8fe0d829a92eb6"
}
----


Mint az fent látható, a blokk 367 db tranzakciót tartalmaz, és a 18. kilistázott tranzakció (+9ca8f9...+) az a txid (tranzakció azonosító), amely 50 milliBitet írt jóvá a címünkre. A +height+ sor szerint az adott blokk a 286384. blokk volt a blokkláncban. 

A blokkot a +getblockhash+ paranccsal a magassága alapján is elérhetjük, a parancs paramétere a blokk magasság, és a blokk hash-t (zanzát) adja vissza:

----
$ **`bitcoind getblockhash 0`**
000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f
----

Fent a „genezis blokk” blokk hash-ét irattuk ki. A genezis blokk volt az első blokk melyet Satoshi Nakamoto kibányászott, és nulla a magassága. A blokk a következőket tartalmazza:

----
$ **`bitcoind getblock 000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f`**
{
    "hash" : "000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f",
    "confirmations" : 286388,
    "size" : 285,
    "height" : 0,
    "version" : 1,
    "merkleroot" : "4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b",
    "tx" : [
        "4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b"
    ],
    "time" : 1231006505,
    "nonce" : 2083236893,
    "bits" : "1d00ffff",
    "difficulty" : 1.00000000,
    "chainwork" : "0000000000000000000000000000000000000000000000000000000100010001",
    "nextblockhash" : "00000000839a8e6886ab5951d76f411475428afc90947ee320161bbf18eb6048"
}
----

A +getblock+, +getblockhash+ és +gettransaction+ paranccsokkal a blokklánc adatbázisa program segítségével is vizsgálható.   


==== Az el nem költött kimenetek alapján tranzakciók létrehozása, aláírása és feladása

Commands: listunspent, gettxout, createrawtransaction, decoderawtransaction, signrawtransaction, sendrawtransaction
Parancsok: listunspent, gettxout, createrawtransaction, decoderawtransaction, signrawtransaction, sendrawtransaction

A bitcoin tranzakciók azon alapulnak, hogy az előző tranzakciók eredményeképpen előálló „kimenetek” elköltésével egy olyan tranzakciós lánc jön létre, amely a tulajdonjogot címről címre ruházza át. A pénztárcánk épp most fogadott egy olyan tranzakciót, amely egy ilyen kimenetet a mi címünkhöz rendelt hozzá. A tranzakció megerősítése után el tudjuk költeni ezt a kimenetet. 

Először is a +listunspent+ paranccsal a pénztárcánkabn lévő összes elköltetelen, *megerősített* kimenetet kiirathatjuk:

----
$ **`bitcoind listunspent`**
[
    {
        "txid" : "9ca8f969bd3ef5ec2a8685660fdbf7a8bd365524c2e1fc66c309acbae2c14ae3",
        "vout" : 0,
        "address" : "1hvzSofGwT8cjb8JU7nBsCSfEVQX5u9CL",
        "account" : "",
        "scriptPubKey" : "76a91407bdb518fa2e6089fd810235cf1100c9c13d1fd288ac",
        "amount" : 0.05000000,
        "confirmations" : 7
    }
]
----

Láthajuk, hogy a +9ca8f9...+ tranzakció létrehozott egy kimenetet (0 vout index-szel), amely az +1hvzSo...+ címhez van rendelve, a nagysága 50 milliBit, és már 7 megerősítést kaptunk róla. A tranzakciók az előzőleg létrehozott kimeneteket használják bemenetként oly módon, hogy a tranzakció azonosítójukkal és vout indexükkel hivatkoznak rájuk. Most létre fogunk hozni egy tranzakciót, amely a bemenetén egy új címhez rendeli, és ezáltal  elkölti a +9ca8f9...+ tranzakció azonosító (txid) 0-ik kimenetét.

Először részletesebben vizsgáljuk meg az adott kimentet. A +gettxout+ paranccsal a fenti elköltetlen kimenet részleteit irathatjuk ki. A tranzakciós kimenetekre mindig txid és vout alapján lehet hivatkozni, és ezeket a paramétereket adjuk meg a +gettxout+ -nak: 

----
$ **`bitcoind gettxout 9ca8f969bd3ef5ec2a8685660fdbf7a8bd365524c2e1fc66c309acbae2c14ae3 0`**
{
    "bestblock" : "0000000000000001405ce69bd4ceebcdfdb537749cebe89d371eb37e13899fd9",
    "confirmations" : 7,
    "value" : 0.05000000,
    "scriptPubKey" : {
        "asm" : "OP_DUP OP_HASH160 07bdb518fa2e6089fd810235cf1100c9c13d1fd2 OP_EQUALVERIFY OP_CHECKSIG",
        "hex" : "76a91407bdb518fa2e6089fd810235cf1100c9c13d1fd288ac",
        "reqSigs" : 1,
        "type" : "pubkeyhash",
        "addresses" : [
            "1hvzSofGwT8cjb8JU7nBsCSfEVQX5u9CL"
        ]
    },
    "version" : 1,
    "coinbase" : false
}
----

Fent azt látjuk, hogy a kimenet 50 milliBitet hozzárendelt az +1hvz...+ címünkhöz. A kimenet elköltéséhez egy új tranzakciót hozunk létre. Először állítsunk elő egy címet, ahová elküldhetjuk a pénzt:

----
$ **`bitcoind getnewaddress`**
1LnfTndy3qzXGN19Jwscj1T8LR3MVe3JDb
----

25 milliBitet fogunk az +1LnfTn...+ új címre elküldeni, melyet épp most hoztunk létre a pénztárcánkban. Az új tranzakciónkban elköltjük az 50 milliBitet, és 25 milliBitet küldünk erre az új címre. Mivel az előző tranzakció egész kimentetét el kell költenünk, a visszajáró pénzt is kezelnünk kell. A visszajáró pénzt az +1hzv...+ címre fogjuk visszaküldeni, vagyis ugyanarra a címre, amelyről az érték származott. Végül tranzakciós díjat is kell fizetnünk a tranzakcióért. A díjat úgy fogjuk megfizetni, hogy a visszajáró összeget csökkentjük 0.5 milliBittel, és csak 24.5 milliBitet küldünk vissza. Az új kimenetek összegének (25 mBTC + 24.5 mBTC = 49.5 mBTC) és a bemenetnek (50 mBTC) a különbségét tranzakciós díjként a bányászok kapják. 

A +createrawtransaction+ parancsot használjuk a fenti tranzakció létrehozására. A +createrawtransaction+ –nak paraméterként a tranzakció bemenetet adjuk meg (vagyis a megerősített tranzakciónkból az 50 milliBit elköltetlen kimenetet), valamint a két tranzakció kimenetet (az új címre küldött pénzt, és az előző címre visszaküldött visszajáró pénzt):

----
$ **`bitcoind createrawtransaction 
 '[{"txid" : "9ca8f969bd3ef5ec2a8685660fdbf7a8bd365524c2e1fc66c309acbae2c14ae3", "vout" : 0}]' 
'{"1LnfTndy3qzXGN19Jwscj1T8LR3MVe3JDb": 0.025, 
"1hvzSofGwT8cjb8JU7nBsCSfEVQX5u9CL": 0.0245}'`**

0100000001e34ac1e2baac09c366fce1c2245536bda8f7db0f6685862aecf53ebd69f9a89c0000000000ffffffff02a0252600000000001976a914d90d36e98f62968d2bc9bbd68107564a156a9bcf88ac50622500000000001976a91407bdb518fa2e6089fd810235cf1100c9c13d1fd288ac00000000
----

A +createrawtransaction+ parancs egy nyers hexadecimális stringet hoz létre, amely az általunk megadott tranzakció részleteit kódolja. Ellenőrizzük, hogy minden rendben van-e! Dekódoljuk ezt a nyers stringet a +decoderawtransaction+ paranccsal:

----
$ **`bitcoind decoderawtransaction 0100000001e34ac1e2baac09c366fce1c2245536bda8f7db0f6685862aecf53ebd69f9a89c0000000000ffffffff02a0252600000000001976a914d90d36e98f62968d2bc9bbd68107564a156a9bcf88ac50622500000000001976a91407bdb518fa2e6089fd810235cf1100c9c13d1fd288ac00000000`**
{
    "txid" : "0793299cb26246a8d24e468ec285a9520a1c30fcb5b6125a102e3fc05d4f3cba",
    "version" : 1,
    "locktime" : 0,
    "vin" : [
        {
            "txid" : "9ca8f969bd3ef5ec2a8685660fdbf7a8bd365524c2e1fc66c309acbae2c14ae3",
            "vout" : 0,
            "scriptSig" : {
                "asm" : "",
                "hex" : ""
            },
            "sequence" : 4294967295
        }
    ],
    "vout" : [
        {
            "value" : 0.02500000,
            "n" : 0,
            "scriptPubKey" : {
                "asm" : "OP_DUP OP_HASH160 d90d36e98f62968d2bc9bbd68107564a156a9bcf OP_EQUALVERIFY OP_CHECKSIG",
                "hex" : "76a914d90d36e98f62968d2bc9bbd68107564a156a9bcf88ac",
                "reqSigs" : 1,
                "type" : "pubkeyhash",
                "addresses" : [
                    "1LnfTndy3qzXGN19Jwscj1T8LR3MVe3JDb"
                ]
            }
        },
        {
            "value" : 0.02450000,
            "n" : 1,
            "scriptPubKey" : {
                "asm" : "OP_DUP OP_HASH160 07bdb518fa2e6089fd810235cf1100c9c13d1fd2 OP_EQUALVERIFY OP_CHECKSIG",
                "hex" : "76a91407bdb518fa2e6089fd810235cf1100c9c13d1fd288ac",
                "reqSigs" : 1,
                "type" : "pubkeyhash",
                "addresses" : [
                    "1hvzSofGwT8cjb8JU7nBsCSfEVQX5u9CL"
                ]
            }
        }
    ]
}
----

A tranzakció helyesnek látszik! Az új tranzakció „elfogyasztja” a megerősített tranzakció elköltetlen kimenetét, majd elkölti azt két kimenetben, ezek egyike 25 milliBit az új címre, míg a másik 24.5 milliBit visszajáró pénz az eredeti címre. A 0.5 milliBites különbség jelenti a tranzakciós díjat, mely annak a bányásznak lesz jóváírva, aki rábukkan a tranzakciónkat is magába foglaló blokkra. 

Mint azt észrevehették, a tranzakció egy üres +scriptSig+-et tartalmaz, mivel még nincs aláírva. Aláírás nélkül a tranzakció értelmetlen, még nem bizonyítottuk, hogy a miénk az a cím, amelyből az elköltetlen kimenet származik. Az aláírás révén eltávolítjuk a kimeneten lévő akadályt, és bizonyítjuk, hogy a kimenet a mi birtokunkban van és el tudjuk költeni. A +signrawtransaction+ parancsot használjuk a tranzakció aláírására. Paraméterként a nyers tranzakció hexadecimális stringjét adjuk meg neki.

[Tipp]
====
A titkosított pénztárcákat az aláírás előtt ki kell nyitni, mivel az aláíráshoz szükség van a pénztárcában lévő titkos kulcsokra.
====

----
$ **`bitcoind walletpassphrase foo 360`**
$ **`bitcoind signrawtransaction`** 0100000001e34ac1e2baac09c366fce1c2245536bda8f7db0f6685862aecf53ebd69f9a89c0000000000ffffffff02a0252600000000001976a914d90d36e98f62968d2bc9bbd68107564a156a9bcf88ac50622500000000001976a91407bdb518fa2e6089fd810235cf1100c9c13d1fd288ac00000000
{
    "hex" : "0100000001e34ac1e2baac09c366fce1c2245536bda8f7db0f6685862aecf53ebd69f9a89c000000006a47304402203e8a16522da80cef66bacfbc0c800c6d52c4a26d1d86a54e0a1b76d661f020c9022010397f00149f2a8fb2bc5bca52f2d7a7f87e3897a273ef54b277e4af52051a06012103c9700559f690c4a9182faa8bed88ad8a0c563777ac1d3f00fd44ea6c71dc5127ffffffff02a0252600000000001976a914d90d36e98f62968d2bc9bbd68107564a156a9bcf88ac50622500000000001976a91407bdb518fa2e6089fd810235cf1100c9c13d1fd288ac00000000",
    "complete" : true
}
----

A +signrawtransaction+ parancs egy másik hexadecimálisan kódolt nyers tranzakciót ad vissza. A +decoderawtransaction+-nal kódoljuk vissza, hogy láthassuk, mi változott:

----
$ **`bitcoind decoderawtransaction 0100000001e34ac1e2baac09c366fce1c2245536bda8f7db0f6685862aecf53ebd69f9a89c000000006a47304402203e8a16522da80cef66bacfbc0c800c6d52c4a26d1d86a54e0a1b76d661f020c9022010397f00149f2a8fb2bc5bca52f2d7a7f87e3897a273ef54b277e4af52051a06012103c9700559f690c4a9182faa8bed88ad8a0c563777ac1d3f00fd44ea6c71dc5127ffffffff02a0252600000000001976a914d90d36e98f62968d2bc9bbd68107564a156a9bcf88ac50622500000000001976a91407bdb518fa2e6089fd810235cf1100c9c13d1fd288ac00000000`**
{
    "txid" : "ae74538baa914f3799081ba78429d5d84f36a0127438e9f721dff584ac17b346",
    "version" : 1,
    "locktime" : 0,
    "vin" : [
        {
            "txid" : "9ca8f969bd3ef5ec2a8685660fdbf7a8bd365524c2e1fc66c309acbae2c14ae3",
            "vout" : 0,
            "scriptSig" : {
                "asm" : "304402203e8a16522da80cef66bacfbc0c800c6d52c4a26d1d86a54e0a1b76d661f020c9022010397f00149f2a8fb2bc5bca52f2d7a7f87e3897a273ef54b277e4af52051a0601 03c9700559f690c4a9182faa8bed88ad8a0c563777ac1d3f00fd44ea6c71dc5127",
                "hex" : "47304402203e8a16522da80cef66bacfbc0c800c6d52c4a26d1d86a54e0a1b76d661f020c9022010397f00149f2a8fb2bc5bca52f2d7a7f87e3897a273ef54b277e4af52051a06012103c9700559f690c4a9182faa8bed88ad8a0c563777ac1d3f00fd44ea6c71dc5127"
            },
            "sequence" : 4294967295
        }
    ],
    "vout" : [
        {
            "value" : 0.02500000,
            "n" : 0,
            "scriptPubKey" : {
                "asm" : "OP_DUP OP_HASH160 d90d36e98f62968d2bc9bbd68107564a156a9bcf OP_EQUALVERIFY OP_CHECKSIG",
                "hex" : "76a914d90d36e98f62968d2bc9bbd68107564a156a9bcf88ac",
                "reqSigs" : 1,
                "type" : "pubkeyhash",
                "addresses" : [
                    "1LnfTndy3qzXGN19Jwscj1T8LR3MVe3JDb"
                ]
            }
        },
        {
            "value" : 0.02450000,
            "n" : 1,
            "scriptPubKey" : {
                "asm" : "OP_DUP OP_HASH160 07bdb518fa2e6089fd810235cf1100c9c13d1fd2 OP_EQUALVERIFY OP_CHECKSIG",
                "hex" : "76a91407bdb518fa2e6089fd810235cf1100c9c13d1fd288ac",
                "reqSigs" : 1,
                "type" : "pubkeyhash",
                "addresses" : [
                    "1hvzSofGwT8cjb8JU7nBsCSfEVQX5u9CL"
                ]
            }
        }
    ]
}
----

Most már egy +scriptsSig+-et tartalmaznak a tranzakció bemenetei. A +scriptSig+ egy digitális aláírás, ami bizonyítja az +1hzv...+ cím tulajdonjogát, és megszünteti a kimeneten az akadályt, ami ezáltal elkölthetővé válik. Az aláírás a tranzakciót a bitcoin hálózat bármely csomópontja által ellenőrizhetővé teszi.

Most küldjük el ezt az újonnan létrehozott tranzakciót a hálózatnak. Ezt a +sendrawtransaction+ paranccsal fogjuk megtenni, amely a +signrawtransaction+ által létrehozott nyers hexadecimális stringet kapja paraméterként. Ez ugyanaz a string, amit épp most dekódoltunk:

----
$ **`bitcoind sendrawtransaction 0100000001e34ac1e2baac09c366fce1c2245536bda8f7db0f6685862aecf53ebd69f9a89c000000006a47304402203e8a16522da80cef66bacfbc0c800c6d52c4a26d1d86a54e0a1b76d661f020c9022010397f00149f2a8fb2bc5bca52f2d7a7f87e3897a273ef54b277e4af52051a06012103c9700559f690c4a9182faa8bed88ad8a0c563777ac1d3f00fd44ea6c71dc5127ffffffff02a0252600000000001976a914d90d36e98f62968d2bc9bbd68107564a156a9bcf88ac50622500000000001976a91407bdb518fa2e6089fd810235cf1100c9c13d1fd288ac00000000`**

ae74538baa914f3799081ba78429d5d84f36a0127438e9f721dff584ac17b346
----

A +sendrawtransaction+ parancs egy _tranzakció hash-t (txid-t)_ ad vissza, miután feladta a tranzakciót a hálózatnak. Ekkor a +gettransaction+ paranccsal le tudjuk kérdezni ezt a tranzakciót:

----
$ **`bitcoind gettransaction ae74538baa914f3799081ba78429d5d84f36a0127438e9f721dff584ac17b346`**
{
    "amount" : 0.00000000,
    "fee" : -0.00050000,
    "confirmations" : 0,
    "txid" : "ae74538baa914f3799081ba78429d5d84f36a0127438e9f721dff584ac17b346",
    "time" : 1392666702,
    "timereceived" : 1392666702,
    "details" : [
        {
            "account" : "",
            "address" : "1LnfTndy3qzXGN19Jwscj1T8LR3MVe3JDb",
            "category" : "send",
            "amount" : -0.02500000,
            "fee" : -0.00050000
        },
        {
            "account" : "",
            "address" : "1hvzSofGwT8cjb8JU7nBsCSfEVQX5u9CL",
            "category" : "send",
            "amount" : -0.02450000,
            "fee" : -0.00050000
        },
        {
            "account" : "",
            "address" : "1LnfTndy3qzXGN19Jwscj1T8LR3MVe3JDb",
            "category" : "receive",
            "amount" : 0.02500000
        },
        {
            "account" : "",
            "address" : "1hvzSofGwT8cjb8JU7nBsCSfEVQX5u9CL",
            "category" : "receive",
            "amount" : 0.02450000
        }
    ]
}
----

Mint korábban, most is részletesebben vizsgálhatjuk ezt a tranzakciót a +getrawtransaction+ és a +decoderawtransaction+ parancsokkal. Ezek a parancsok pontosan ugyanazt a hexadecimális stringet adják vissza, amit az előtt állítottunk elő és dekódoltunk, mielőtt elküldtük volna a hálózatnak. 


=== Alternatív kliensek, könyvtárak és eszközkészletek 

A bitcoind referencia kliensen kívül vannak más kliensek és könyvtárak is, melyek használatával kapcsolatba léphetünk a bitcoin hálózattal és az adatstruktúrákkal. Ezek különféle programozási nyelveken lettek megvalósítva, így a programozóknak az általuk használt programozási nyelven kínálnak natív interfészeket. 

Alternativ megvalósítás többek között:

* a libbitcoin és az sx eszközkészlet, amely egy több szálú, teljes csomóponthoz tartozó C++ kliens és könyvtár, a hozzá tartozó parancssori eszközökkel (https://libbitcoin.dyne.org/)
* a bitcoinj, amely egy Jávában megírt, teljes csomóponthoz tartozó kliens könyvtár (https://code.google.com/p/bitcoinj)
* a btcd, amely egy Go nyelven megírt, teljes csomóponthoz tartozó bitcoin kliens (https://opensource.conformal.com/wiki/btcd)
* a Bits of Proof (BOP), amely a bitcoin egy Java Enterprise-ban történt megvalósítása  (https://bitsofproof.com)
* a picocoin, amely egy pehelysúlyú bitcoin kliens könyvtár C-ben megvalósítva (https://github.com/jgarzik/picocoin)

Sok egyéb könyvtár létezik sok más programozási nyelven, és állandóan újabbak születnek. 

==== A libbitcoin és az sx eszközkészlet

A libbitcoin könyvtár egy skálázható, több szálú, moduláris C++ implementáció, amely egy teljes csomóponthoz tartozó klienst támogat, valamint egy „sx”-nek nevezett eszközkészletet, amely nagyon sok ugyanolyan lehetőséggel rendelkezik, mint a fejezetben vizsgált bitcoind kliens parancsok.  Az sx eszközkészlet néhány olyan kulcs kezelési és átalakítási eszközt is ad, amivel a bitcoind nem rendelkezik, többek között a 2. típusú determinisztikus kulcsokat és a kulcsokhoz tartozó mnemonikokat. 

===== Az sx installálása

Az sx és az őt támogató libbitcoin könyvtár installálásához egy Linux rendszeren töltse le és futtassa az online installálót:

----
$ **`wget http://sx.dyne.org/install-sx.sh`**
$ **`sudo bash ./install-sx.sh`**
----

Az sx eszközkészlet ezzel installálásra került. A segítségnyújtó szöveg kiírásához gépelje be paraméterek nélkül azt, hogy +sx+. Ezzel az összes parancs kilistázható:

----
Usage: sx COMMAND [ARGS]...

  -c, --config               Specify a config file

The sx commands are:

DETERMINISTIC KEYS AND ADDRESSES
   genaddr                    Generate a Bitcoin address deterministically from a wallet
                              seed or master public key.
   genpriv                    Generate a private key deterministically from a seed.
   genpub                     Generate a public key deterministically from a wallet
                              seed or master public key.
   mpk                        Extract a master public key from a deterministic wallet seed.
   newseed                    Create a new deterministic wallet seed.

TRANSACTION PARSING
   showscript                 Show the details of a raw script.
   showtx                     Show the details of a transaction.

BLOCKCHAIN QUERIES (blockexplorer.com)
   blke-fetch-transaction     Fetches a transaction from blockexplorer.com

FORMAT
   base58-decode              Convert from base58 to hex
   base58-encode              Convert from hex to base58
   base58check-decode         Convert from base58check to hex
   base58check-encode         Convert from hex to base58check
   decode-addr                Decode an address to its internal RIPEMD representation.
   embed-addr                 Generate an address used for embedding record of data into the blockchain.
   encode-addr                Encode an address to base58check form.
   ripemd-hash                RIPEMD hash data from STDIN.
   unwrap                     Validates checksum and recovers version byte and original data from hexstring.
   validaddr                  Validate an address.
   wrap                       Adds version byte and checksum to hexstring.

BRAINWALLET
   brainwallet                Make a private key from a brainwallet
   mnemonic                   Work with Electrum compatible mnemonics (12 words wallet seed).

BLOCKCHAIN WATCHING
   monitor                    Monitor an address.
   watchtx                    Watch transactions from the network searching for a certain hash.

BLOCKCHAIN QUERIES (blockchain.info)
   bci-fetch-last-height      Fetch the last block height using blockchain.info.
   bci-history                Get list of output points, values, and their spends
                              from blockchain.info

MISC
   btc                        Convert Satoshis into Bitcoins.
   initchain                  Initialize a new blockchain.
   qrcode                     Generate Bitcoin QR codes offline.
   satoshi                    Convert Bitcoins into Satoshis.
   showblkhead                Show the details of a block header.
   wallet                     Experimental command line wallet.

MULTISIG ADDRESSES
   scripthash                 Create BIP 16 script hash address from raw script hex.

LOOSE KEYS AND ADDRESSES
   addr                       See Bitcoin address of a public or private key.
   get-pubkey                 Get the pubkey of an address if available
   newkey                     Create a new private key.
   pubkey                     See the public part of a private key.

STEALTH
   secret-to-wif              Convert a secret exponent value to Wallet. Import. Format.
   stealth-new                Generate a new master stealth secret.
   stealth-recv               Regenerate the secret from your master secret and provided nonce.
   stealth-send               Generate a new sending address and a stealth nonce.

CREATE TRANSACTIONS
   mktx                       Create an unsigned tx.
   rawscript                  Create the raw hex representation from a script.
   set-input                  Set a transaction input.
   sign-input                 Sign a transaction input.

VALIDATE
   validsig                   Validate a transaction input's signature.

BLOCKCHAIN QUERIES
   balance                    Show balance of a Bitcoin address in satoshis.
   fetch-block-header         Fetch raw block header.
   fetch-last-height          Fetch the last block height.
   fetch-transaction          Fetch a raw transaction using a network connection to make requests against the obelisk load balancer backend.
   fetch-transaction-index    Fetch block height and index in block of transaction.
   get-utxo                   Get enough unspent transaction outputs from a given set of
                              addresses to pay a given number of satoshis
   history                    Get list of output points, values, and their spends for an
                              address. grep can filter for just unspent outputs which can
                              be fed into mktx.
   validtx                    Validate a transaction.

BLOCKCHAIN UPDATES
   sendtx-bci                 Send tx to blockchain.info/pushtx.
   sendtx-node                Send transaction to a single node.
   sendtx-obelisk             Send tx to obelisk server.
   sendtx-p2p                 Send tx to bitcoin network.

See 'sx help COMMAND' for more information on a specific command.

SpesmiloXchange home page: <http://sx.dyne.org/>
----

===== Kulcsok előállítása és kezelése az sx-szel

Egy új titkos kulcs, amely az operációs rendszer véletlenszám generátorát használja, a +newkey+ paranccsal állítható elő. A szabványos kimenetet a +private_key+ állományba mentettük el:

----
$ **`sx newkey > private_key`**
$ **`cat private_key`**
5Jgx3UAaXw8AcCQCi1j7uaTaqpz2fqNR9K3r4apxdYn6rTzR1PL
----

A +pubkey+ paranccsal lehet ebből a titkos kulcsból a nyilvános kulcsot előállítani. A +private_key+ állomány legyen a szabványos bemenet, a szaványos kimenetet pedig mentsük el egy új, +public_key+ állományba: 

----
$ **`sx pubkey < private_key > public_key`**
$ **`cat public_key`**
02fca46a6006a62dfdd2dbb2149359d0d97a04f430f12a7626dd409256c12be500
----

Az +addr+ paranccsal címként újraformázhatjuk a nyilvános kulcsot. A +public_key+ –t a szabványos bemeneten adjuk meg:

----
$ **`sx addr < public_key`**
17re1S4Q8ZHyCP8Kw7xQad1Lr6XUzWUnkG
----

===== Determinisztikus kulcsok az sx-szel

A fenti előállított kulcsok úgynevezett 0. típusú nem determinisztikus kulcsok. Ez azt jelenti, hogy mindegyik egy véletlenszám generátorral lett előállítva. Az sx eszközkészlet a 2. típusú determinisztikus kulcsokat is támogatja, amelyeknél egy „mester” kulcs jön létre először, és ennek kiterjesztésével jön létre az alkulcsok lánca vagy fája. 

Elsőször egy „magot” állítunk elő, amely egy  – az Elektrum pénztárcával vagy hasonló megvalósításokkal kompatibilis kulcslánc előállításnak lesz az alapja. A +newseed+ parancsot használjuk a mag értékének előállítására:

----
$ **`sx newseed > seed`**
$ **`cat seed`**
eb68ee9f3df6bd4441a9feadec179ff1
----

A mag értéke a +mnemonic+ paranccsal szavak formájában is kiexportálható. Ezt a formát emberek számára is könnyen olvasható, könnyebb tárolni és begépelni, mint egy hexadecimális stringet. 

----
$ **`sx mnemonic < seed > words`**
$ **`cat words`**
adore repeat vision worst especially veil inch woman cast recall dwell appreciate
----

A szavakból a mag a +mnemonic+ parancs ismételt végrehajtásával állítható elő:

----
$ **`sx mnemonic < words`**
eb68ee9f3df6bd4441a9feadec179ff1
----

A mag ismeretében egy titkos és nyilvános kulcsokból álló kulcssorozat, azaz egy kulcs lánc állítható elő. A +genpriv+ paranccsal a magból titkos kulcsok sorozata állítható elő, az +addr+ paranccsal pedig az ezekhez tartozó nyilvános kulcsok.

----
$ **`sx genpriv 0 < seed`**
5JzY2cPZGViPGgXZ4Syb9Y4eUGjJpVt6sR8noxrpEcqgyj7LK7i
$ **`sx genpriv 0 < seed | sx addr`**
1esVQV2vR9JZPhFeRaeWkAhzmWq7Fi7t7

$ **`sx genpriv 1 < seed`**
5JdtL7ckAn3iFBFyVG1Bs3A5TqziFTaB9f8NeyNo8crnE2Sw5Mz
$ **`sx genpriv 1 < seed | sx addr`**
1G1oTeXitk76c2fvQWny4pryTdH1RTqSPW
----

A determinisztikus kulcsok segítségével kulcsok ezrei állítható elő és állítható elő ismét, és az összes kulcs egy determinisztikus láncban, egyetlen egy magból származik. Sok pénztárca alkalmazás használja ezt a módszert kulcsok előállítására, mert a kucsok így egy egyszerű, több szóból álló mnemonic-kal elmenthetők és visszaállíthatók. 

[Tipp]
====
Az sx eszközkészletben sok hasznos parancsot tartalmaz  címek kódolására és dekódolására, és különféle formátumok és ábrázolások közötti konverzióra. Segítségükkel a különféle formátumok, pl. base58, base58check, hex, stb. vizsgálható.
====

==== btcd

A btcd egy Go-ban megírt, teljes comópontot megvalósító bitcoin implementáció. Jelenleg  helyesen letölti, ellenőrzi és kiszolgálja a blokkláncot. A blokkok elfogadása a referencia implementáció, a bitcoind pontos szabályai szerint történik (beleértve a hibákat is). Helyesen továbbítja az újonnan kibányászott blokkokat is, karban tartja a tranzakciós készletet és továbbítja azokat a tranzakciókat, melyek még nem lettek blokkba foglalva. Biztosítja, hogy a tranzakciós készletbe (pool-ba) befogadott összes tranzakció teljesíti a blokklánc által megkövetelt szabályokat, és azoknak a szigorú ellenőrzéseknek a túlnyomó többségét is tartalmazza, amelyek a bányászok követelményei szerint szűrik a tranzakciókat ("szabványos" tranzakciók).

A btcd és a bitcoind közötti egyik lényeges különbség az, hogy a btcd-ben tudatos tervezési döntés eredményeképpen nincs pénztárca funkció. Ez azt jelenti, hogy közvetlenül a btcd-vel nem lehet fizetni vagy pénzt fogadni. Ezt a funkciót a btcwallet és a btcgui projektek biztosítják, mindkettő aktív fejlesztés alatt áll. Egy másik figyelemre méltó különbség az, hogy a btcd nem csak a HTTP POST kéréseket támogatja (a bitcoind-hez hasonlóan), hanem a Websocket-eket is, és a btcd RPC összeköttetéseinél alapértelemben engedélyezve van a TLS.


===== A btcd installálása

Ha a Go nyelv már installálva van, akkor Windows alatt https://github.com/conformal/btcd/releases helyen lévő msi-t kell futtani, Linux alatt pedig a következő parancsot:

----
$ **`go get github.com/conformal/btcd/...`**
----

A btcd legutolsó verziójára történő frissítéshez futtassa a következőt:

----
$ **`go get -u -v github.com/conformal/btcd/...`**
----

===== A btcd beállítása

A btcd számos beállítási lehetőséggel rendelkezik. Ezeket úgy lehet megnézni, ha futtatjuk:

----
$ **`btcd --help`**
----

A btcd egy btcctl parancssori segédprogrammal is rendelkezik. Ennek segítségével a btcd RPC-n keresztül beállítható vagy lekérdezhető. A btcd alapéretelemben nem engedélyezi az RPC szerverét, emiatt minimálisan egy RPC felhasználó név és jelszó beállítására van szükség:

* btcd.conf configuration file
----
[Application Options]
rpcuser=myuser
rpcpass=SomeDecentp4ssw0rd
----

Vagy ha a parancssorból szeretné felülbírálni a konfigurációs állományban lévő értékeket:

----
$ **`btcd -u myuser -P SomeDecentp4ssw0rd`**
$ **`btcctl -u myuser -P SomeDecentp4ssw0rd`**
----

A rendelkezésre álló lehetőségek kilistázásához futtassa a következőt:

----
$ **`btcctl --help`**
----
